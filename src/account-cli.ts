import readline from 'readline';
import fs from 'fs';
import path from 'path';
import { AccountService } from './database/services/account-service';
import { initializeDatabase } from './configs/database.config';
import { DatabaseManager } from './database';

interface AccountData {
  accountId: string;
  loginMethod: "cookie" | "qr";
  qrPath?: string;
  zaloConfig?: {
    selfListen?: boolean;
    checkUpdate?: boolean;
    logging?: boolean;
  };
  proxyConfig?: {
    enabled: boolean;
    url: string;
  };
  cookie?: any[];
  imei?: string;
  userAgent?: string;
  isActive?: boolean;
}

class AccountCLI {
  private rl: readline.Interface;
  private accountService: AccountService;
  private accountsFilePath: string;
  private db: DatabaseManager;

  constructor(db: DatabaseManager) {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    this.db = db;
    this.accountService = this.db.account;
    this.accountsFilePath = path.join(process.cwd(), "src", 'configs', 'account.json');
  }

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ file account.json
  private readAccountsFromFile(): AccountData[] {
    try {
      if (fs.existsSync(this.accountsFilePath)) {
        const data = fs.readFileSync(this.accountsFilePath, 'utf8');
        return JSON.parse(data);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë·ªçc file account.json:', error);
    }
    return [];
  }

  // Ghi d·ªØ li·ªáu v√†o file account.json
  private writeAccountsToFile(accounts: AccountData[]): void {
    try {
      const dir = path.dirname(this.accountsFilePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(this.accountsFilePath, JSON.stringify(accounts, null, 2), 'utf8');
    } catch (error) {
      console.error('‚ùå L·ªói khi ghi file account.json:', error);
    }
  }

  // Hi·ªÉn th·ªã menu ch√≠nh
  private showMenu(): void {
    console.log('\n=== QU·∫¢N L√ù T√ÄI KHO·∫¢N ZALO BOT ===');
    console.log('1. T·∫°o file m·∫´u'); 
    console.log('2. Xem t·∫•t c·∫£ t√†i kho·∫£n'); 
    console.log('3. Th√™m/C·∫≠p nh·∫≠t t√†i kho·∫£n');
    console.log('4. X√≥a t√†i kho·∫£n');
    console.log('5. B·∫≠t/T·∫Øt t√†i kho·∫£n');
    console.log('6. ƒê·ªìng b·ªô file ‚Üí database');
    console.log('7. ƒê·ªìng b·ªô database ‚Üí file');
    console.log('0. Tho√°t');
    console.log('================================');
  }

  // Nh·∫≠p d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng
  private question(prompt: string): Promise<string> {
    return new Promise((resolve) => {
      this.rl.question(prompt, resolve);
    });
  }

  // T·∫°o file m·∫´u
  async createSampleFile(): Promise<void> {
    console.log('\n=== T·∫†O FILE M·∫™U ===');
    
    const sampleAccounts: AccountData[] = [
      {
        accountId: "bot_sample_01",
        loginMethod: "cookie",
        qrPath: "qr_bot_sample_01.png",
        isActive: true,
        zaloConfig: {
          selfListen: true,
          checkUpdate: false,
          logging: false
        },
        proxyConfig: {
          enabled: false,
          url: "http://proxy.example.com:8080"
        },
        cookie: [],
        imei: "sample-imei-device-id",
        userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
      },
      {
        accountId: "bot_sample_02",
        loginMethod: "qr",
        qrPath: "qr_bot_sample_02.png",
        isActive: false,
        zaloConfig: {
          selfListen: false,
          checkUpdate: true,
          logging: true
        },
        proxyConfig: {
          enabled: true,
          url: "http://another-proxy.example.com:3128"
        },
        imei: "sample-imei-device-id-2",
        userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
      }
    ];

    // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i
    if (fs.existsSync(this.accountsFilePath)) {
      const confirm = await this.question('File account.json ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√®? (y/n): ');
      if (confirm.toLowerCase() !== 'y') {
        console.log('‚ùå H·ªßy t·∫°o file m·∫´u.');
        return;
      }
    }

    try {
      this.writeAccountsToFile(sampleAccounts);
      console.log('‚úÖ T·∫°o file m·∫´u th√†nh c√¥ng!');
      console.log(`üìÅ File ƒë∆∞·ª£c t·∫°o t·∫°i: ${this.accountsFilePath}`);
      console.log('üìã File ch·ª©a 2 t√†i kho·∫£n m·∫´u:');
      console.log('   ‚Ä¢ bot_sample_01 (cookie, active)');
      console.log('   ‚Ä¢ bot_sample_02 (qr, inactive)');
      console.log('üí° B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a file n√†y ho·∫∑c s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng kh√°c trong menu.');
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o file m·∫´u:', error);
    }
  }

  // Xem t·∫•t c·∫£ t√†i kho·∫£n (m·∫∑c ƒë·ªãnh t·ª´ database v√† l∆∞u v√†o file)
  async showAllAccounts(): Promise<void> {
    try {
      console.log('\n=== XEM T·∫§T C·∫¢ T√ÄI KHO·∫¢N ===');
      console.log('üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ database...');
      
      // L·∫•y t·∫•t c·∫£ t√†i kho·∫£n t·ª´ database
      const dbAccounts = await this.accountService.find();
      
      if (dbAccounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong database.');
        console.log('üí° B·∫°n c√≥ th·ªÉ t·∫°o file m·∫´u (ch·ªçn 1) ho·∫∑c th√™m t√†i kho·∫£n m·ªõi (ch·ªçn 3).');
        return;
      }

      // Chuy·ªÉn ƒë·ªïi t·ª´ database entities sang AccountData format v√† l∆∞u v√†o file
      const accountsData: AccountData[] = dbAccounts.map(account => {
        const accountData: AccountData = {
          accountId: account.accountId,
          loginMethod: account.loginMethod,
          isActive: account.isActive
        };

        if (account.imei) {
          accountData.imei = account.imei;
        }

        if (account.userAgent) {
          accountData.userAgent = account.userAgent;
        }

        if (account.zaloConfig) {
          try {
            accountData.zaloConfig = JSON.parse(account.zaloConfig);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse zaloConfig cho account ${account.accountId}`);
          }
        }

        if (account.proxyConfig) {
          try {
            accountData.proxyConfig = JSON.parse(account.proxyConfig);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse proxyConfig cho account ${account.accountId}`);
          }
        }

        if (account.cookie) {
          try {
            accountData.cookie = JSON.parse(account.cookie);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse cookie cho account ${account.accountId}`);
          }
        }

        return accountData;
      });

      // L∆∞u v√†o file
      this.writeAccountsToFile(accountsData);
      console.log(`üíæ ƒê√£ c·∫≠p nh·∫≠t file: ${this.accountsFilePath}`);

      // Hi·ªÉn th·ªã danh s√°ch
      console.log('\n=== DANH S√ÅCH T√ÄI KHO·∫¢N ===');
      accountsData.forEach((account, index) => {
        console.log(`\n${index + 1}. Account ID: ${account.accountId}`);
        console.log(`   Ph∆∞∆°ng th·ª©c: ${account.loginMethod}`);
        console.log(`   Tr·∫°ng th√°i: ${account.isActive !== false ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}`);
        console.log(`   QR Path: ${account.qrPath || 'N/A'}`);
        console.log(`   IMEI: ${account.imei || 'N/A'}`);
        
        if (account.zaloConfig) {
          console.log(`   Zalo Config: selfListen=${account.zaloConfig.selfListen}, checkUpdate=${account.zaloConfig.checkUpdate}, logging=${account.zaloConfig.logging}`);
        }
        
        if (account.proxyConfig) {
          console.log(`   Proxy: ${account.proxyConfig.enabled ? 'B·∫≠t' : 'T·∫Øt'} - ${account.proxyConfig.url || 'N/A'}`);
        }
      });

      console.log(`\nüìä T·ªïng c·ªông: ${accountsData.length} t√†i kho·∫£n`);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ database:', error);
      console.log('üîÑ ƒêang th·ª≠ ƒë·ªçc t·ª´ file backup...');
      
      // Fallback: ƒë·ªçc t·ª´ file n·∫øu database l·ªói
      const accounts = this.readAccountsFromFile();
      if (accounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ d·ªØ li·ªáu backup trong file.');
        return;
      }

      console.log('\n=== DANH S√ÅCH T√ÄI KHO·∫¢N (T·ª™ FILE BACKUP) ===');
      accounts.forEach((account, index) => {
        console.log(`\n${index + 1}. Account ID: ${account.accountId}`);
        console.log(`   Ph∆∞∆°ng th·ª©c: ${account.loginMethod}`);
        console.log(`   Tr·∫°ng th√°i: ${account.isActive !== false ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}`);
        console.log(`   QR Path: ${account.qrPath || 'N/A'}`);
        console.log(`   IMEI: ${account.imei || 'N/A'}`);
        if (account.zaloConfig) {
          console.log(`   Zalo Config: selfListen=${account.zaloConfig.selfListen}, checkUpdate=${account.zaloConfig.checkUpdate}, logging=${account.zaloConfig.logging}`);
        }
        if (account.proxyConfig) {
          console.log(`   Proxy: ${account.proxyConfig.enabled ? 'B·∫≠t' : 'T·∫Øt'} - ${account.proxyConfig.url || 'N/A'}`);
        }
      });
    }
  }

  // Th√™m/C·∫≠p nh·∫≠t t√†i kho·∫£n (ƒë·ªçc t·ª´ file account.json v√† l∆∞u v√†o database)
  async addAccount(): Promise<void> {
    try {
      console.log('\n=== TH√äM/C·∫¨P NH·∫¨T T√ÄI KHO·∫¢N ===');
      console.log('üîÑ ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ file account.json...');
      
      // ƒê·ªçc t√†i kho·∫£n t·ª´ file
      const accounts = this.readAccountsFromFile();
      
      if (accounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong file account.json.');
        console.log('üí° B·∫°n c√≥ th·ªÉ t·∫°o file m·∫´u (ch·ªçn 1) tr∆∞·ªõc khi th√™m t√†i kho·∫£n.');
        return;
      }

      // L·∫•y danh s√°ch t√†i kho·∫£n ƒë√£ c√≥ trong database
      const dbAccounts = await this.accountService.find();
      const existingAccountIds = dbAccounts.map(acc => acc.accountId);

      let addedCount = 0;
      let updatedCount = 0;
      
      console.log('\nüîÑ ƒêang x·ª≠ l√Ω t·ª´ng t√†i kho·∫£n...');
      
      for (const accountData of accounts) {
        try {
          // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
          if (existingAccountIds.includes(accountData.accountId)) {
            console.log(`üîÑ C·∫≠p nh·∫≠t t√†i kho·∫£n "${accountData.accountId}"`);
            updatedCount++;
          } else {
            console.log(`‚ûï Th√™m m·ªõi t√†i kho·∫£n "${accountData.accountId}"`);
            addedCount++;
          }

          // Th√™m/C·∫≠p nh·∫≠t t√†i kho·∫£n v√†o database (AccountService s·∫Ω t·ª± stringify)
          await this.accountService.createOrUpdateAccount({
            accountId: accountData.accountId,
            loginMethod: accountData.loginMethod,
            zaloConfig: accountData.zaloConfig,
            proxyConfig: accountData.proxyConfig,
            cookie: accountData.cookie,
            imei: accountData.imei,
            userAgent: accountData.userAgent,
            qrPath: accountData.qrPath
          });
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i active
          if (accountData.isActive === false) {
            await this.accountService.deactivateAccount(accountData.accountId);
          } else {
            await this.accountService.activateAccount(accountData.accountId);
          }
          
          console.log(`‚úÖ X·ª≠ l√Ω th√†nh c√¥ng: "${accountData.accountId}"`);
          
        } catch (error) {
          console.error(`‚ùå L·ªói khi x·ª≠ l√Ω t√†i kho·∫£n "${accountData.accountId}":`, error);
        }
      }
      
      console.log('\n=== K·∫æT QU·∫¢ X·ª¨ L√ù T√ÄI KHO·∫¢N ===');
      console.log(`‚ûï ƒê√£ th√™m m·ªõi: ${addedCount} t√†i kho·∫£n`);
      console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t: ${updatedCount} t√†i kho·∫£n`);
      console.log(`üìä T·ªïng x·ª≠ l√Ω: ${addedCount + updatedCount}/${accounts.length} t√†i kho·∫£n`);
      
      if (addedCount > 0 || updatedCount > 0) {
        console.log('üíæ T·∫•t c·∫£ t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v√†o database.');
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m/c·∫≠p nh·∫≠t t√†i kho·∫£n:', error);
    }
  }

  // X√≥a t√†i kho·∫£n (ƒë·ªçc t·ª´ database v√† x√≥a trong database)
  async deleteAccount(): Promise<void> {
    try {
      console.log('\n=== X√ìA T√ÄI KHO·∫¢N ===');
      console.log('üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ database...');
      
      // L·∫•y t·∫•t c·∫£ t√†i kho·∫£n t·ª´ database
      const dbAccounts = await this.accountService.find();
      
      if (dbAccounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong database ƒë·ªÉ x√≥a.');
        console.log('üí° B·∫°n c√≥ th·ªÉ t·∫°o file m·∫´u (ch·ªçn 1) ho·∫∑c th√™m t√†i kho·∫£n m·ªõi (ch·ªçn 3).');
        return;
      }

      // Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n t·ª´ database
      console.log('\n=== DANH S√ÅCH T√ÄI KHO·∫¢N ===');
      dbAccounts.forEach((account, index) => {
        console.log(`${index + 1}. Account ID: ${account.accountId} - Tr·∫°ng th√°i: ${account.isActive ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}`);
      });
      
      const indexStr = await this.question('\nCh·ªçn s·ªë th·ª© t·ª± t√†i kho·∫£n c·∫ßn x√≥a: ');
      const index = parseInt(indexStr) - 1;
      
      if (index < 0 || index >= dbAccounts.length) {
        console.log('‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!');
        return;
      }

      const account = dbAccounts[index];
      const confirm = await this.question(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n "${account.accountId}" kh·ªèi database? (y/n): `);
      
      if (confirm.toLowerCase() === 'y') {
        // X√≥a trong database
        await this.accountService.deleteAccount(account.accountId);
        console.log('‚úÖ X√≥a t√†i kho·∫£n kh·ªèi database th√†nh c√¥ng!');
        
        // ƒê·ªìng b·ªô database v·ªÅ file ƒë·ªÉ backup
        console.log('üîÑ ƒêang ƒë·ªìng b·ªô database v·ªÅ file...');
        await this.syncDatabaseToFile();
      } else {
        console.log('‚ùå H·ªßy x√≥a t√†i kho·∫£n.');
      }
      
    } catch (error) {
      console.error('‚ùå L·ªói khi x√≥a t√†i kho·∫£n:', error);
    }
  }

  // B·∫≠t/T·∫Øt t√†i kho·∫£n (ƒë·ªçc t·ª´ database v√† l∆∞u v√†o database)
  async toggleAccount(): Promise<void> {
    try {
      console.log('\n=== B·∫¨T/T·∫ÆT T√ÄI KHO·∫¢N ===');
      console.log('üîÑ ƒêang l·∫•y d·ªØ li·ªáu t·ª´ database...');
      
      // L·∫•y t·∫•t c·∫£ t√†i kho·∫£n t·ª´ database
      const dbAccounts = await this.accountService.find();
      
      if (dbAccounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong database ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i.');
        console.log('üí° B·∫°n c√≥ th·ªÉ t·∫°o file m·∫´u (ch·ªçn 1) ho·∫∑c th√™m t√†i kho·∫£n m·ªõi (ch·ªçn 3).');
        return;
      }

      // Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n t·ª´ database
      console.log('\n=== DANH S√ÅCH T√ÄI KHO·∫¢N ===');
      dbAccounts.forEach((account, index) => {
        console.log(`${index + 1}. Account ID: ${account.accountId} - Tr·∫°ng th√°i: ${account.isActive ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üî¥ T·∫Øt'}`);
      });
      
      const indexStr = await this.question('\nCh·ªçn s·ªë th·ª© t·ª± t√†i kho·∫£n c·∫ßn thay ƒë·ªïi tr·∫°ng th√°i: ');
      const index = parseInt(indexStr) - 1;
      
      if (index < 0 || index >= dbAccounts.length) {
        console.log('‚ùå S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!');
        return;
      }

      const account = dbAccounts[index];
      const currentStatus = account.isActive;
      const newStatus = !currentStatus;
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong database
      if (newStatus) {
        await this.accountService.activateAccount(account.accountId);
      } else {
        await this.accountService.deactivateAccount(account.accountId);
      }
      
      console.log(`‚úÖ ƒê√£ ${newStatus ? 'b·∫≠t' : 't·∫Øt'} t√†i kho·∫£n "${account.accountId}" trong database`);
      
      // ƒê·ªìng b·ªô database v·ªÅ file ƒë·ªÉ backup
      console.log('üîÑ ƒêang ƒë·ªìng b·ªô database v·ªÅ file...');
      await this.syncDatabaseToFile();
      
    } catch (error) {
      console.error('‚ùå L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i t√†i kho·∫£n:', error);
    }
  }

  // ƒê·ªìng b·ªô v·ªõi database (file ‚Üí database)
  async syncFileToDatabase(): Promise<void> {
    try {
      console.log('\n=== ƒê·ªíNG B·ªò FILE ‚Üí DATABASE ===');
      
      const accounts = this.readAccountsFromFile();
      let syncCount = 0;
      
      for (const accountData of accounts) {
        try {
          await this.accountService.createOrUpdateAccount({
            accountId: accountData.accountId,
            loginMethod: accountData.loginMethod,
            zaloConfig: accountData.zaloConfig,
            proxyConfig: accountData.proxyConfig,
            cookie: accountData.cookie,
            imei: accountData.imei,
            userAgent: accountData.userAgent,
            qrPath: accountData.qrPath
          });
          
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i active
          if (accountData.isActive === false) {
            await this.accountService.deactivateAccount(accountData.accountId);
          } else {
            await this.accountService.activateAccount(accountData.accountId);
          }
          
          syncCount++;
        } catch (error) {
          console.error(`‚ùå L·ªói ƒë·ªìng b·ªô t√†i kho·∫£n ${accountData.accountId}:`, error);
        }
      }
      
      console.log(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng ${syncCount}/${accounts.length} t√†i kho·∫£n t·ª´ file v√†o database.`);
    } catch (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error);
    }
  }

  // ƒê·ªìng b·ªô t·ª´ database v·ªÅ file
  async syncDatabaseToFile(): Promise<void> {
    try {
      console.log('\n=== ƒê·ªíNG B·ªò DATABASE ‚Üí FILE ===');
      
      // L·∫•y t·∫•t c·∫£ t√†i kho·∫£n t·ª´ database
      const dbAccounts = await this.accountService.find();
      
      if (dbAccounts.length === 0) {
        console.log('üìã Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong database ƒë·ªÉ ƒë·ªìng b·ªô.');
        return;
      }

      // Chuy·ªÉn ƒë·ªïi t·ª´ database entities sang AccountData format
      const accountsData: AccountData[] = dbAccounts.map(account => {
        const accountData: AccountData = {
          accountId: account.accountId,
          loginMethod: account.loginMethod,
          isActive: account.isActive
        };

        if (account.imei) {
          accountData.imei = account.imei;
        }

        if (account.userAgent) {
          accountData.userAgent = account.userAgent;
        }

        if (account.zaloConfig) {
          try {
            accountData.zaloConfig = JSON.parse(account.zaloConfig);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse zaloConfig cho account ${account.accountId}`);
          }
        }

        if (account.proxyConfig) {
          try {
            accountData.proxyConfig = JSON.parse(account.proxyConfig);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse proxyConfig cho account ${account.accountId}`);
          }
        }

        if (account.cookie) {
          try {
            accountData.cookie = JSON.parse(account.cookie);
          } catch (e) {
            console.warn(`‚ö†Ô∏è L·ªói parse cookie cho account ${account.accountId}`);
          }
        }

        return accountData;
      });

      // Ghi v√†o file
      this.writeAccountsToFile(accountsData);
      
      console.log(`‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng ${accountsData.length} t√†i kho·∫£n t·ª´ database v√†o file.`);
      console.log(`üìÅ File ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${this.accountsFilePath}`);
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô t·ª´ database:', error);
    }
  }

  // Ch·∫°y CLI
  async run(): Promise<void> {
    console.log('üöÄ Kh·ªüi ƒë·ªông Account CLI...');
    
    while (true) {
      this.showMenu();
      const choice = await this.question('Ch·ªçn ch·ª©c nƒÉng (0-7): ');
      
      switch (choice.trim()) {
        case '1':
          await this.createSampleFile();
          break;
        case '2':
          await this.showAllAccounts();
          break;
        case '3':
          await this.addAccount();
          break;
        case '4':
          await this.deleteAccount();
          break;
        case '5':
          await this.toggleAccount();
          break;
        case '6':
          await this.syncFileToDatabase();
          break;
        case '7':
          await this.syncDatabaseToFile();
          break;
        case '0':
          console.log('üëã T·∫°m bi·ªát!');
          this.rl.close();
          return;
        default:
          console.log('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!');
      }
      
      // T·∫°m d·ª´ng tr∆∞·ªõc khi hi·ªÉn th·ªã menu ti·∫øp theo
      await this.question('\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...');
    }
  }
}

// Ch·∫°y CLI n·∫øu file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if (require.main === module) {
  (async () => {
    const db: DatabaseManager = await initializeDatabase();
    const cli = new AccountCLI(db);
    await cli.run();
  })().catch(console.error);
}


export { AccountCLI };