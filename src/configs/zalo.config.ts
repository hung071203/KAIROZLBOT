import {
  Zalo,
  API,
  LoginQRCallbackEvent,
  LoginQRCallbackEventType,
} from "zca-js";
import { HttpProxyAgent } from "http-proxy-agent";
import nodefetch from "node-fetch";
import { config } from "dotenv";
import {
  LoginWithCookie,
  LoginWithQR,
  ZaloConfig,
  AccountConfig,
} from "../common/types";
import { safeBase64 } from "../utils/download.util";
import { DatabaseManager } from "../database";
import { Logger } from "../utils/logger.util";

config();

export class KairoZLBot {
  private zalo: Zalo;
  private api!: API; // S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o khi ƒëƒÉng nh·∫≠p
  private accountId: string;
  private db: DatabaseManager;

  constructor(
    db: DatabaseManager,
    config: ZaloConfig = {},
    accountId: string = "default",
    proxyConfig?: {
      enabled: boolean;
      url: string; // Format: "http(s)://user:pass@host:port"
    }
  ) {
    this.accountId = accountId;
    this.db = db;

    // C·∫•u h√¨nh proxy n·∫øu c√≥
    const zaloConfig: any = {
      selfListen: config.selfListen || false,
      checkUpdate: config.checkUpdate || true,
      logging: config.logging || true,
    };

    if (proxyConfig?.enabled && proxyConfig.url) {
      try {
        zaloConfig.agent = new HttpProxyAgent(proxyConfig.url);
        // @ts-ignore
        zaloConfig.polyfill = nodefetch;
        Logger.info(
          `üåê [${this.accountId}] S·ª≠ d·ª•ng proxy: ${proxyConfig.url.replace(
            /\/\/.*:.*@/,
            "//***:***@"
          )}`
        );
      } catch (error) {
        Logger.error(
          `‚ùå [${this.accountId}] L·ªói c·∫•u h√¨nh proxy, ti·∫øn h√†nh ƒëƒÉng nh·∫≠p kh√¥ng d√πng proxy:`,
          error
        );
      }
    }

    // Override config n·∫øu c√≥ agent v√† polyfill t·ª´ config truy·ªÅn v√†o
    if (config.agent) zaloConfig.agent = config.agent;
    if (config.polyfill) zaloConfig.polyfill = config.polyfill;

    this.zalo = new Zalo(zaloConfig);
  }

  /**
   * ƒêƒÉng nh·∫≠p b·∫±ng Cookie
   * C·∫ßn chu·∫©n b·ªã tr∆∞·ªõc:
   * 1. L·∫•y IMEI t·ª´ localStorage: localStorage.getItem('z_uuid') ho·∫∑c localStorage.getItem('sh_z_uuid')
   * 2. L·∫•y UserAgent: navigator.userAgent
   * 3. L∆∞u cookie v√†o file cookie.json
   */
  async loginWithCookie(loginData: LoginWithCookie) {
    try {
      Logger.info(`üîê [${this.accountId}] ƒêang ƒëƒÉng nh·∫≠p b·∫±ng Cookie...`);

      this.api = await this.zalo.login({
        cookie: loginData.cookie,
        imei: loginData.imei,
        userAgent: loginData.userAgent,
      });

      const realAccId = this.api.getOwnId();
      if (realAccId && realAccId !== this.accountId) {
        Logger.info(
          `C·∫≠p nh·∫≠t ID t√†i kho·∫£n t·ª´ ${this.accountId} th√†nh ${realAccId}`
        );

        await this.db.account.update(
          { accountId: this.accountId },
          { accountId: realAccId }
        );
        this.accountId = realAccId;
      }

      Logger.info(`‚úÖ [${this.accountId}] ƒêƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng Cookie!`);
      return this.api;
    } catch (error) {
      Logger.error(`‚ùå [${this.accountId}] L·ªói ƒëƒÉng nh·∫≠p b·∫±ng Cookie:`, error);
      throw error;
    }
  }

  /**
   * ƒêƒÉng nh·∫≠p b·∫±ng QR Code
   * ƒê∆°n gi·∫£n h∆°n, ch·ªâ c·∫ßn scan QR code
   */
  /**
   * ƒêƒÉng nh·∫≠p b·∫±ng QR Code (callback ƒë·ªÉ x·ª≠ l√Ω t·ª´ng tr·∫°ng th√°i)
   * @param options
   * @param callback Callback nh·∫≠n event QR code (QRCodeGenerated, Scanned, Success, ...)
   */
  async loginWithQR(
    options: LoginWithQR = {},
    callback?: (event: LoginQRCallbackEvent) => void
  ) {
    try {
      Logger.info(`üì± [${this.accountId}] ƒêang t·∫°o QR Code ƒë·ªÉ ƒëƒÉng nh·∫≠p...`);

      this.api = await this.zalo.loginQR(
        {
          userAgent: options.userAgent || "",
          qrPath: options.qrPath || `./qr_${this.accountId}.png`,
        },
        (event: LoginQRCallbackEvent) => {
          if (callback) {
            callback(event);
            return;
          }
          // N·∫øu kh√¥ng c√≥ callback, x·ª≠ l√Ω m·∫∑c ƒë·ªãnh nh∆∞ c≈©
          if (event?.type == LoginQRCallbackEventType.QRCodeGenerated) {
            safeBase64(
              options.qrPath,
              `data:image/png;base64,${event.data["image"]}`
            );
          } else if (event?.type == LoginQRCallbackEventType.QRCodeScanned) {
            Logger.info(
              `${event.data["display_name"]} ƒë√£ qu√©t QR Code, ƒëang ƒë·ª£i x√°c nh·∫≠n...`
            );
          } else if (event?.type == 4) {
            Logger.info(`ƒêƒÉng nh·∫≠p th√†nh c√¥ng, ƒëang l∆∞u d·ªØ li·ªáu v√†o db...`);
            this.db.account.update(
              { accountId: this.accountId },
              {
                cookie: JSON.stringify(event.data["cookie"]),
                imei: event.data["imei"],
                userAgent: event.data["userAgent"],
                loginMethod: "cookie",
              }
            );
          } else if (event?.type == LoginQRCallbackEventType.QRCodeExpired) {
            Logger.warn(`QR Code ƒë√£ h·∫øt h·∫°n, h√£y qu√©t l·∫°i ƒë·ªÉ ƒëƒÉng nh·∫≠p ti·∫øp!`);
          }
        }
      );
      const realAccId = this.api.getOwnId();
      if (realAccId && realAccId !== this.accountId) {
        Logger.info(
          `C·∫≠p nh·∫≠t ID t√†i kho·∫£n t·ª´ ${this.accountId} th√†nh ${realAccId}`
        );
        await this.db.account.update(
          { accountId: this.accountId },
          { accountId: realAccId }
        );
        this.accountId = realAccId;
      }

      Logger.info(`‚úÖ [${this.accountId}] ƒêƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng QR Code!`);
      return this.api;
    } catch (error) {
      Logger.error(`‚ùå [${this.accountId}] L·ªói ƒëƒÉng nh·∫≠p b·∫±ng QR Code:`, error);
      throw error;
    }
  }

  /**
   * T·ª± ƒë·ªông ch·ªçn ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p t·ª´ c·∫•u h√¨nh account
   */
  async autoLoginFromConfig(accountConfig: AccountConfig) {
    try {
      if (accountConfig.loginMethod === "cookie") {
        if (
          !accountConfig.cookie ||
          !accountConfig.imei ||
          !accountConfig.userAgent
        ) {
          throw new Error(
            `[${this.accountId}] Thi·∫øu th√¥ng tin cookie/imei/userAgent`
          );
        }

        await this.loginWithCookie({
          cookie: accountConfig.cookie,
          imei: accountConfig.imei,
          userAgent: accountConfig.userAgent,
        });
      } else {
        await this.loginWithQR({
          userAgent: accountConfig.userAgent || "",
          qrPath: accountConfig.qrPath || `./qr_${accountConfig.id}.png`,
        });
      }

      this.accountId = this.api.getOwnId();

      return this.api;
    } catch (error) {
      Logger.error(`‚ùå [${this.accountId}] L·ªói ƒëƒÉng nh·∫≠p t·ª± ƒë·ªông:`, error);
      throw error;
    }
  }

  /**
   * B·∫Øt ƒë·∫ßu l·∫Øng nghe
   */
  start() {
    if (!this.api) {
      throw new Error("Ch∆∞a ƒëƒÉng nh·∫≠p! H√£y g·ªçi ph∆∞∆°ng th·ª©c login tr∆∞·ªõc.");
    }

    this.api.listener.start();
    Logger.info(`üöÄ [${this.accountId}] Bot ƒë√£ b·∫Øt ƒë·∫ßu l·∫Øng nghe!`);
  }

  /**
   * D·ª´ng bot
   */
  stop() {
    if (this.api && this.api.listener) {
      this.api.listener.stop();
      Logger.info(`‚èπÔ∏è [${this.accountId}] Bot ƒë√£ d·ª´ng l·∫Øng nghe!`);
    }
  }

  getAccountId(): string {
    return this.accountId;
  }

  /**
   * L·∫•y API instance
   */
  getAPI(): API {
    if (!this.api) {
      throw new Error("Ch∆∞a ƒëƒÉng nh·∫≠p!");
    }
    return this.api;
  }
}

// Multi-account bot manager
export class MultiAccountBotManager {
  private bots: Map<string, KairoZLBot> = new Map();
  private db: DatabaseManager;

  constructor(databaseManager: DatabaseManager) {
    this.db = databaseManager;
  }
  /**
   * Th√™m bot m·ªõi
   */
  async addBot(
    config: {
      accountId: string;
      loginMethod: "cookie" | "qr";
      zaloConfig?: ZaloConfig;
      proxyConfig?: {
        enabled: boolean;
        url: string;
      };
      // Cookie login data
      cookie?: any;
      imei?: string;
      userAgent?: string;
      // QR login data
      qrPath?: string;
    },
    callback?: (event: LoginQRCallbackEvent) => void
  ) {
    if (this.bots.has(config.accountId)) {
      throw new Error(`Bot v·ªõi ID ${config.accountId} ƒë√£ t·ªìn t·∫°i`);
    }

    Logger.info(`ü§ñ Kh·ªüi t·∫°o bot ${config.accountId}...`);

    const bot = new KairoZLBot(
      this.db,
      config.zaloConfig || {},
      config.accountId,
      config.proxyConfig
    );

    // ƒêƒÉng nh·∫≠p theo ph∆∞∆°ng th·ª©c ƒë∆∞·ª£c ch·ªçn
    if (config.loginMethod === "cookie") {
      if (!config.cookie || !config.imei || !config.userAgent) {
        throw new Error(
          `Bot ${config.accountId}: Thi·∫øu th√¥ng tin cookie/imei/userAgent`
        );
      }

      await bot.loginWithCookie({
        cookie: config.cookie,
        imei: config.imei,
        userAgent: config.userAgent,
      });
    } else {
      await bot.loginWithQR(
        {
          userAgent: config.userAgent || "",
          qrPath: config.qrPath || `./qr_${config.accountId}.png`,
        },
        callback
      );
    }

    this.bots.set(config.accountId, bot);

    return bot;
  }

  /**
   * L·∫•y bot theo ID
   */
  getBot(accountId: string): KairoZLBot | undefined {
    return this.bots.get(accountId);
  }

  /**
   * L·∫•y t·∫•t c·∫£ bot
   */
  getAllBots(): KairoZLBot[] {
    return Array.from(this.bots.values());
  }

  /**
   * X√≥a bot
   */
  removeBot(accountId: string) {
    const bot = this.bots.get(accountId);
    if (!bot) throw new Error(`Kh√¥ng t√¨m th·∫•y bot v·ªõi ID ${accountId}`);

    bot.stop();
    this.bots.delete(accountId);
    Logger.info(`‚úÖ ƒê√£ x√≥a bot ${accountId}`);
  }

  removeAllBots() {
    Logger.info("üóëÔ∏è ƒêang x√≥a t·∫•t c·∫£ bot...");
    for (const [id, bot] of this.bots) {
      try {
        this.removeBot(id);
      } catch (error) {
        Logger.error(`‚ùå L·ªói d·ª´ng bot ${id}:`, error);
      }
    }
  }

  /**
   * D·ª´ng t·∫•t c·∫£ bot
   */
  stopAllBots() {
    Logger.info("üõë ƒêang d·ª´ng t·∫•t c·∫£ bot...");

    for (const [id, bot] of this.bots) {
      try {
        bot.stop();
      } catch (error) {
        Logger.error(`‚ùå L·ªói d·ª´ng bot ${id}:`, error);
      }
    }

    this.bots.clear();
    Logger.info("‚úÖ ƒê√£ d·ª´ng t·∫•t c·∫£ bot");
  }

  /**
   * L·∫•y s·ªë l∆∞·ª£ng bot ƒëang ho·∫°t ƒë·ªông
   */
  getBotCount(): number {
    return this.bots.size;
  }
}
