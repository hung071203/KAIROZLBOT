import { API, Message } from "zca-js";
import { BotContext } from "../types";
import { chat } from "./gemini.service";
import { Content } from "@google/generative-ai";
import { Logger } from "../../utils/logger.util";

export interface AgentResponse {
  history?: Content[]; // L·ªãch s·ª≠ tr√≤ chuy·ªán, n·∫øu c·∫ßn
  data: {
    response: string;
    code: string;
  };
}

/**
 * Service x·ª≠ l√Ω logic th√¥ng minh cho Agent
 */
export class AgentService {
  private api: API;
  private context: BotContext;
  private agentName: string;
  private history: Content[] = [];

  private basePrompt = `T√¥i s·∫Ω g·ª≠i b·∫°n m·ªôt s·ª± ki·ªán (event). H√£y ƒë·ªçc k·ªπ v√† ph·∫£n h·ªìi ƒë√∫ng theo n·ªôi dung s·ª± ki·ªán.

‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:
- M·ªåI TH√îNG TIN B·∫†N C·∫¶N ƒë·ªÅu ƒë√£ c√≥ trong event.
- ƒê·ª™NG BAO GI·ªú y√™u c·∫ßu th√™m th√¥ng tin ngo√†i event.
- N·∫øu n·ªôi dung t√¥i mu·ªën nh·∫Øn cho b·∫°n n·∫±m trong event, b·∫°n ph·∫£i ph·∫£n h·ªìi ch√≠nh x√°c theo n·ªôi dung ƒë√≥.
- c√≥ code b·∫Øt b·ªôc ph·∫£i d√πng await n·∫øu c√≥ g·ªçi b·∫•t ƒë√¥ng b·ªô, k·ªÉ c·∫£ kh√¥ng c·∫ßn tr·∫£ v·ªÅ d·ªØ li·ªáu t·ª´ n√≥.

B·∫°n ph·∫£i ph·∫£n h·ªìi d·ª±a tr√™n c√°c c·∫•u h√¨nh m√† t√¥i ƒë√£ h∆∞·ªõng d·∫´n tr∆∞·ªõc ƒë√≥.

D∆∞·ªõi ƒë√¢y l√† th√¥ng tin v·ªÅ s·ª± ki·ªán:
{event}`;

  getEventInfo(event) {
    return this.basePrompt.replace("{event}", event);
  }

  constructor(
    api: API,
    context: BotContext,
    agentName: string,
    history?: Content[]
  ) {
    this.api = api;
    this.context = context;
    this.agentName = agentName;

    if (history && Array.isArray(history)) {
      this.history = history;
    }
  }

  /**
   * Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
   */
  async analyzeUserRequest(userInput: string): Promise<AgentResponse> {
    // T·∫°o system prompt v·ªõi c·∫•u h√¨nh agent
    const systemPrompt = `B·∫°n t√™n l√† ${this.agentName}, 1 ng∆∞·ªùi qu·∫£n l√Ω nh√≥m th√¥ng minh c·ªßa KAIROZLBOT - m·ªôt tr·ª£ l√Ω c√≥ th·ªÉ th·ª±c hi·ªán t·∫•t c·∫£ c√°c h√†nh ƒë·ªông t·ª± ƒë·ªông tr√™n Zalo.

üîß C√ÅC API ZALO C√ì S·∫¥N (v·ªõi signature chi ti·∫øt, t·∫•t c·∫£ ƒë·ªÅu d√πng async):
     ZCA-JS API Documentation

 1. FRIEND MANAGEMENT
// Qu·∫£n l√Ω b·∫°n b√®
api.acceptFriendRequest(userId: string): Promise<"">
api.sendFriendRequest(userId: string, message?: string): Promise<SendFriendRequestResponse>
api.removeFriend(userId: string): Promise<"">
api.blockUser(userId: string): Promise<"">
api.unblockUser(userId: string): Promise<"">
api.changeFriendAlias(alias: string, friendId: string): Promise<"">
api.removeFriendAlias(friendId: string): Promise<"">
api.getAllFriends(count?: number, page?: number): Promise<GetAllFriendsResponse>
// GetAllFriendsResponse: Array<{userId, username, displayName, zaloName, avatar, gender, phoneNumber, status}>


 2. GROUP MANAGEMENT
// Qu·∫£n l√Ω nh√≥m
api.createGroup(options: CreateGroupOptions): Promise<CreateGroupResponse> 
// ‚úÖ T·∫°o nh√≥m chat m·ªõi v·ªõi t√™n, th√†nh vi√™n v√† ·∫£nh ƒë·∫°i di·ªán t√πy ch·ªçn

api.addUserToGroup(memberId: string | string[], threadId: string): Promise<AddUserToGroupResponse> 
// ‚ûï Th√™m m·ªôt ho·∫∑c nhi·ªÅu th√†nh vi√™n v√†o nh√≥m ƒë√£ t·ªìn t·∫°i

api.removeUserFromGroup(memberId: string | string[], threadId: string): Promise<""> 
// ‚ûñ Xo√° m·ªôt ho·∫∑c nhi·ªÅu th√†nh vi√™n kh·ªèi nh√≥m

api.changeGroupName(name: string, threadId: string): Promise<ChangeGroupNameResponse> 
// ‚úèÔ∏è ƒê·ªïi t√™n nh√≥m

api.changeGroupAvatar(avatarSource: AttachmentSource, threadId: string): Promise<""> 
// üñºÔ∏è ƒê·ªïi ·∫£nh ƒë·∫°i di·ªán c·ªßa nh√≥m

api.changeGroupOwner(memberId: string, threadId: string): Promise<ChangeGroupOwnerResponse> 
// üëë Chuy·ªÉn quy·ªÅn tr∆∞·ªüng nh√≥m cho m·ªôt th√†nh vi√™n kh√°c

api.addGroupDeputy(memberId: string | string[], threadId: string): Promise<""> 
// üéñÔ∏è Th√™m m·ªôt ho·∫∑c nhi·ªÅu th√†nh vi√™n l√†m ph√≥ nh√≥m

api.removeGroupDeputy(memberId: string | string[], threadId: string): Promise<""> 
// ‚ùå G·ª° quy·ªÅn ph√≥ nh√≥m c·ªßa m·ªôt ho·∫∑c nhi·ªÅu th√†nh vi√™n

api.leaveGroup(threadId: string): Promise<""> 
// üö™ R·ªùi kh·ªèi nh√≥m (d√†nh cho ch√≠nh m√¨nh)

api.disperseGroup(threadId: string): Promise<""> 
// üí• Gi·∫£i t√°n nh√≥m (ch·ªâ tr∆∞·ªüng nh√≥m m·ªõi c√≥ quy·ªÅn)

 3. MESSAGE APIS
// G·ª≠i tin nh·∫Øn
api.sendMessage(message: MessageContent | string, threadId: string, type?: ThreadType): Promise<SendMessageResponse>
// MessageContent object:
{
  msg: string,                           // N·ªôi dung tin nh·∫Øn (b·∫Øt bu·ªôc)
  styles?: Style[],                      // ƒê·ªãnh d·∫°ng text
  urgency?: Urgency,                     // M·ª©c ƒë·ªô ∆∞u ti√™n (0: Default, 1: Important, 2: Urgent)
  quote?: SendMessageQuote,              // Rep tin nh·∫Øn kh√°c
  mentions?: Mention[],                  // Tag ng∆∞·ªùi d√πng
  attachments?: AttachmentSource[],      // File ƒë√≠nh k√®m
  ttl?: number                          // T·ª± x√≥a (milliseconds)
}

// Style object: {start: number, len: number, st: TextStyle}
// TextStyle: "b"(Bold), "i"(Italic), "u"(Underline), "s"(StrikeThrough), "c_db342e"(Red), "c_f27806"(Orange), "c_f7b503"(Yellow), "c_15a85f"(Green), "f_13"(Small), "f_18"(Big)

// Mention object: {pos: number, uid: string, len: number}

// SendMessageQuote: {content: string, msgType: number, uidFrom: string, msgId: string, cliMsgId: string, ts: number, ttl: number}

// AttachmentSource: string (file path) | {data: Buffer, filename: string, metadata: {totalSize: number, width?: number, height?: number}}

// C√°c API tin nh·∫Øn kh√°c
api.sendSticker(sticker: StickerDetail, threadId: string, type?: ThreadType): Promise<SendStickerResponse>
api.sendVideo(options: SendVideoOptions, threadId: string, type?: ThreadType): Promise<SendVideoResponse>
// SendVideoOptions: {msg?: string, videoUrl: string, thumbnailUrl: string, duration?: number, width?: number, height?: number}

api.sendVoice(options: SendVoiceOptions, threadId: string, type?: ThreadType): Promise<SendVoiceResponse>
// SendVoiceOptions: {voiceUrl: string, ttl?: number}

api.forwardMessage(params: ForwardMessageParams): Promise<ForwardMessageResponse>
// ForwardMessageParams: {message: string, threadIds: string[], ttl?: number, reference?: object}

api.deleteMessage(dest: { data: { cliMsgId: string, msgId: string, uidFrom: string }, threadId: string, type?: ThreadType }, onlyMe?: boolean): Promise<{ status: number }>


4. REACTION & CHAT MANAGEMENT
// Reaction
api.addReaction(icon: Reactions | CustomReaction, dest: AddReactionDestination): Promise<AddReactionResponse>
// AddReactionDestination: {data: {msgId: string, cliMsgId: string}, threadId: string, type: ThreadType}

// Qu·∫£n l√Ω chat
api.deleteChat(threadId: string, type?: ThreadType): Promise<"">
api.setMute(isMute: boolean, threadId: string, type?: ThreadType): Promise<"">
api.addUnreadMark(threadId: string, type?: ThreadType): Promise<AddUnreadMarkResponse>
api.removeUnreadMark(threadId: string, type?: ThreadType): Promise<"">


5. ACCOUNT & USER INFO
// Th√¥ng tin t√†i kho·∫£n
api.fetchAccountInfo(): Promise<AccountInfo>
api.getUserInfo(userId: string | string[]): Promise<ProfileInfo[]>
// ProfileInfo: {displayName, avatar, gender, phoneNumber, ...}

api.changeAccountAvatar(avatarSource: AttachmentSource): Promise<"">
api.updateProfile(profileData: ProfileUpdateData): Promise<"">
// ProfileUpdateData: {displayName?: string, status?: string, ...}
api.getOwnId(): Promise<string>
api.findUser(keyword: string): Promise<FindUserResponse>


// Ti·ªán √≠ch
api.uploadAttachment(sources: AttachmentSource | AttachmentSource[], threadId: string, type?: ThreadType): Promise<UploadAttachmentType[]>
// AttachmentSource = string | {
    data: Buffer;
    filename: \${string}.\${string};
    metadata: {
        totalSize: number;
        width?: number;
        height?: number;
    };
};
// export type UploadAttachmentType = ImageResponse | VideoResponse | FileResponse;
// type ImageResponse = {
    normalUrl: string;
    photoId: string;
    finished: number;
    hdUrl: string;
    thumbUrl: string;
    clientFileId: string;
    chunkId: number;
    fileType: "image";
    width: number;
    height: number;
    totalSize: number;
    hdSize: number;
};
type VideoResponse = {
    finished: number;
    clientFileId: number;
    chunkId: number;
    fileType: "video";
    fileUrl: string;
    fileId: string;
    checksum: string;
    totalSize: number;
    fileName: string;
};
type FileResponse = {
    finished: number;
    clientFileId: number;
    chunkId: number;
    fileType: "others";
    fileUrl: string;
    fileId: string;
    checksum: string;
    totalSize: number;
    fileName: string;
};

api.keepAlive(): Promise<{config_vesion: number;}>

// Tin nh·∫Øn nhanh
api.addQuickMessage(payload: AddQuickMessagePayload): Promise<AddQuickMessageResponse>
// AddQuickMessagePayload: {keyword: string, title: string}
//AddQuickMessageResponse = { items: QuickMessage[]; version: number};
// QuickMessage = {
    id: number;
    keyword: string;
    type: number;
    createdTime: number;
    lastModified: number;
    message: {
        title: string;
        params: string | null;
    };
    media: null;
};

api.getQuickMessage(): Promise<QuickMessageResponse>
//GetQuickMessageResponse = {
    cursor: number;
    version: number;
    items: {
        id: number;
        keyword: string;
        type: number;
        createdTime: number;
        lastModified: number;
        message: {
            title: string;
            params: string | null;
        };
        media: {
            items: QuickMessageMediaItem[];
        } | null;
    }[];
};
//QuickMessageMediaItem = {
    type: number;
    photoId: number;
    title: string;
    width: number;
    height: number;
    previewThumb: string;
    rawUrl: string;
    thumbUrl: string;
    normalUrl: string;
    hdUrl: string;
};

api.updateQuickMessage(updatePayload: UpdateQuickMessagePayload, itemId: number): Promise<UpdateQuickMessageResponse>
//UpdateQuickMessageResponse = {
    items: QuickMessage[];
    version: number;
};
//QuickMessage = {
    id: number;
    keyword: string;
    type: number;
    createdTime: number;
    lastModified: number;
    message: {
        title: string;
        params: string | null;
    };
    media: null;
};
//UpdateQuickMessagePayload = {
    keyword: string;
    title: string;
};

api.removeQuickMessage(itemIds: number | number[]): Promise<RemoveQuickMessageResponse>
//RemoveQuickMessageResponse = {
    itemIds: number[];
    version: number;
}

// L·ªùi nh·∫Øc
api.createReminder(reminderData: CreateReminderData): Promise<CreateReminderResponse>
// CreateReminderData: {content: string, time: number, threadId: string}
api.getReminder(reminderId: string): Promise<ReminderInfo>
api.removeReminder(reminderId: string): Promise<"">

// B√¨nh ch·ªçn
api.createPoll(options: CreatePollOptions, threadId: string): Promise<CreatePollResponse>
// CreatePollOptions = {
    /**
     * Question for the poll.
     */
    question: string;
    /**
     * List of options for the poll.
     */
    options: string[];
    /**
     * Poll expiration time in milliseconds (0 = no expiration).
     */
    expiredTime?: number;
    /**
     * Allows multiple choices in the poll.
     */
    allowMultiChoices?: boolean;
    /**
     * Allows members to add new options to the poll.
     */
    allowAddNewOption?: boolean;
    /**
     * Hides voting results until the user has voted.
     */
    hideVotePreview?: boolean;
    /**
     * Hides poll voters (anonymous poll).
     */
    isAnonymous?: boolean;
};
//CreatePollResponse = {
    creator: string;
    question: string;
    options: {
        content: string;
        votes: number;
        voted: boolean;
        voters: string[];
        option_id: number;
    }[];
    joined: boolean;
    closed: boolean;
    poll_id: string;
    allow_multi_choices: boolean;
    allow_add_new_option: boolean;
    is_anonymous: boolean;
    poll_type: number;
    created_time: number;
    updated_time: number;
    expired_time: number;
    is_hide_vote_preview: boolean;
    num_vote: number;
};

api.getPollDetail(pollId: string): Promise<PollDetail>
//PollDetail = {
    creator: string;
    question: string;
    options: PollOptions[];
    joined: boolean;
    closed: boolean;
    poll_id: number;
    allow_multi_choices: boolean;
    allow_add_new_option: boolean;
    is_anonymous: boolean;
    poll_type: number;
    created_time: number;
    updated_time: number;
    expired_time: number;
    is_hide_vote_preview: boolean;
    num_vote: number;
};

api.lockPoll(pollId: number): Promise<"">


7. EVENTS & STATUS
// S·ª± ki·ªán cu·ªôc tr√≤ chuy·ªán
api.sendDeliveredEvent(isSeen: boolean, messages: SendDeliveredEventMessageParams | SendDeliveredEventMessageParams[], type?: ThreadType): Promise<SendDeliveredEventResponse>
// SendDeliveredEventMessageParams: { msgId: string, cliMsgId: string, uidFrom: string, idTo: string, msgType: string, st: number, at: number, cmd: number, ts: string | number }
api.sendSeenEvent(messages: SendSeenEventMessageParams | SendSeenEventMessageParams[], type?: ThreadType): Promise<SendSeenEventResponse>
// SendSeenEventMessageParams: { msgId: string, cliMsgId: string, uidFrom: string, idTo: string, msgType: string, st: number, at: number, cmd: number, ts: string | number }
api.sendTypingEvent(threadId: string, type?: ThreadType, destType?: DestType): Promise<{status: number;}>
//enum DestType { User = 3, Page = 5}

// C√†i ƒë·∫∑t
api.updateSettings(settings: SettingsData): Promise<"">
// SettingsData: {
//   notification?: boolean,   // B·∫≠t/t·∫Øt th√¥ng b√°o
//   sound?: boolean,          // B·∫≠t/t·∫Øt √¢m thanh
//   theme?: string,           // Giao di·ªán ("light", "dark", ...)
//   language?: string,        // Ng√¥n ng·ªØ giao di·ªán
//   privacyMode?: boolean,    // ·∫®n tr·∫°ng th√°i ho·∫°t ƒë·ªông
//   autoDownload?: boolean,   // T·ª± ƒë·ªông t·∫£i file
//   [key: string]: any        // C√°c tr∆∞·ªùng m·ªü r·ªông kh√°c
// }
api.updateLang(language: UpdateLangAvailableLanguages): Promise<"">
// UpdateLangAvailableLanguages:  VI, EN

// Sticker
api.getStickers(): Promise<StickersResponse>
api.getStickersDetail(stickerIds: number | number[]): Promise<StickerDetailResponse>
// StickerDetailResponse: StickerDetail[]
// StickerDetail = {
    id: number;
    cateId: number;
    type: number;
    text: string;
    uri: string;
    fkey: number;
    status: number;
    stickerUrl: string;
    stickerSpriteUrl: string;
    stickerWebpUrl: any;
    totalFrames: number;
    duration: number;
    effectId: number;
    checksum: string;
    ext: number;
    source: number;
    fss: any;
    fssInfo: any;
    version: number;
    extInfo: any;
}


ENUMS & TYPES
// ThreadType
USER = 0           // Chat 1-1
GROUP = 1         // Chat nh√≥m

// Urgency
Urgency.Default = 0                // Tin nh·∫Øn b√¨nh th∆∞·ªùng
Urgency.Important = 1              // Tin nh·∫Øn quan tr·ªçng
Urgency.Urgent = 2                 // Tin nh·∫Øn kh·∫©n c·∫•p


V√ç D·ª§ S·ª¨ D·ª§NG NHANH
// G·ª≠i tin nh·∫Øn ƒë∆°n gi·∫£n
await api.sendMessage("Hello", "threadId", ThreadType.GROUP);

// G·ª≠i tin nh·∫Øn ph·ª©c t·∫°p
await api.sendMessage({
  msg: "Hello @user, ƒë√¢y l√† tin nh·∫Øn quan tr·ªçng!",
  styles: [{start: 0, len: 5, st: "b"}],
  urgency: 1,
  mentions: [{pos: 6, uid: "userId", len: 5}],
  attachments: ["/path/file.jpg"],
  ttl: 3600000
}, "threadId", ThreadType.GROUP);

// Qu·∫£n l√Ω nh√≥m
await api.createGroup({
  name: "Nh√≥m m·ªõi",
  members: ["user1", "user2"]
});

// Upload v√† g·ª≠i file
const result = await api.uploadAttachment("/path/image.jpg", "threadId");

L∆ØU √ù: EVENT t√¥i g·ª≠i threadId s·∫Ω l√† ID c·ªßa nh√≥m hi·ªán t·∫°i, b·∫°n c√≥ th·ªÉ l·∫•y t·ª´ event.threadId.

üìä C∆† S·ªû D·ªÆ LI·ªÜU:
- accounts: Qu·∫£n l√Ω t√†i kho·∫£n bot
- configs: C·∫•u h√¨nh h·ªá th·ªëng

üìã PH√ÇN T√çCH Y√äU C·∫¶U:
H√£y ph√¢n t√≠ch y√™u c·∫ßu ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "code": h√†m h√†nh ƒë·ªông ƒë·ªÉ t√¥i th·ª±c hi·ªán ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c·∫ßn th·ª±c hi·ªán API,
  "response": "ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng( ƒëinh d·∫°ng string)",
  "continue": true/false (n·∫øu true th√¨ )
}

L∆ØU √ù QUAN TR·ªåNG:
- B·∫°n c√≥ to√†n quy·ªÅn d√πng c√°c api tr√™n ƒë·ªÉ tr√≤ chuy·ªán v·ªõi c√° nh√¢n hay l√† qu·∫£n l√Ω nh√≥m zalo.
- MU·ªêN G·ª¨I PH·∫¢N H·ªíI T·ª™ CODE cho t√¥i PH·∫¢I D√ôNG api.sendMessage
- N·∫øu b·∫°n c·∫ßn th·ª±c hi·ªán code, h√£y tr·∫£ v·ªÅ ƒëo·∫°n code trong tr∆∞·ªùng "code", ph·∫£n h·ªìi ng d√πng truy·ªÅn v√†o response(n·∫øu c·∫ßn).
- N·∫øu kh√¥ng c·∫ßn th·ª±c hi·ªán API, ch·ªâ c·∫ßn tr·∫£ v·ªÅ ph·∫£n h·ªìi trong tr∆∞·ªùng "response", "code" ƒë·ªÉ "".
- B·∫ÆT BU·ªòC RESPONSE PH·∫¢I TR·∫¢ V·ªÄ D∆Ø·ªöI D·∫†NG JSON, NGO√ÄI RA KH√îNG ƒê∆Ø·ª¢C C√ì K√àM GI·∫¢I TH√çCH B√äN NGO√ÄI JSON


- CODE PH·∫¢I D√ôNG JAVA SCRIPT, KH√îNG ƒê∆Ø·ª¢C D√ôNG C√ÅC NG√îN NG·ªÆ KH√ÅC, T√îI CH·∫†Y BACKEND B·∫∞NG NODEJS,D√ôNG EVAL ƒê·ªÇ CH·∫†Y CODE B·∫†N G·ª¨I
- CODE D√ôNG ASYNC AWAIT, N·∫æU B·∫†N C√ì H√ÄNH ƒê·ªòNG B·∫§T ƒê·ªíNG B·ªò, TUY·ªÜT ƒê·ªêI KH√îNG D√ôNG THEN CATCH, CH·ªà D√ôNG ASYNC AWAIT

- ph·∫£n h·ªìi nh∆∞ ki·ªÉu n√≥i chuy·ªán b·∫°n b√®, kh√¥ng ƒë·ªçc l·∫°i c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, ch·ªâ c·∫ßn tr·∫£ l·ªùi theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
- ƒê·ªÅ ngh·ªã tr·∫£ v·ªÅ code n·∫øu b·∫°n c·∫£m th·∫•y c·∫ßn(ho·∫∑c nh·ªØng t√°c v·ª• m√† b·∫°n kh√¥ng l√†m dc tr·ª±c ti·∫øp), k·ªÉ c·∫£ khi ƒë∆°n gi·∫£n.
- QUAN TR·ªåNG NH·∫§T, H√ÉY ƒê·ªåC K·ª∏ C√ÅCH D√ôNG H√ÄM api.sendMessage, C√ÅCH TRUY·ªÄN C√ÅC THAM S·ªê V√ÄO H√ÄM T·∫†I V√å B·∫†N S·∫º D√ôNG N√ì NHI·ªÄU v√† n·∫øu b·∫£o b·∫°n g·ª≠i tin nh·∫Øn, t√πy tr∆∞·ªùng h·ª£p nh∆∞ng c√≥ th·ªÉ b·∫°n kh√¥ng c·∫ßn tin nh·∫Øn ph·∫£n h·ªìi trong response ƒë√¢u.

- ƒë·ªëi v·ªõi c√°c enum khi d√πng trong code ch·ªâ truy·ªÅn gi√° tr·ªã th√¥i ch·ª© k truy·ªÅn enum v√†o
`;
    const baseHis = [
      {
        role: "user",
        parts: [
          {
            text: systemPrompt,
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: `{"code": "", "response": "T√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n."}`,
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: 'g·ª≠i tin nh·∫Øn "ch√†o" ƒë·ªÉ t√¥i th·ª≠ xem b·∫°n hi·ªÉu kh√¥ng',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: `{"code": "api.sendMessage({msg: 'ch√†o'}, "00000000000", 0)", "response": "t√¥i ƒë√£ l√†m theo y√™u c·∫ßu c·ªßa b·∫°n"}`,
          },
        ],
      },
    ];

    try {
      const aiResponse = await chat({
        content: this.getEventInfo(userInput),
        his: this.history.length > 0 ? this.history : baseHis,
      });
      Logger.debug("AI response:", aiResponse);

      let res = aiResponse.text;
      // Extract the JSON part from the text
      if (!aiResponse.text.startsWith("{")) {
        const jsonStringMatch = res.match(/```json\n([\s\S]*?)\n```/);
        if (!jsonStringMatch) {
          throw new Error("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong vƒÉn b·∫£n.");
        }
        res = jsonStringMatch[1].trim();
      }

      const json = JSON.parse(res);

      return {
        history: aiResponse.his,
        data: {
          response: json.response || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.",
          code: json.code || "",
        },
      };
    } catch (error: any) {
      Logger.error("Error analyzing user request:", error);
      return {
        history: baseHis,
        data: {
          response: `‚ùå L·ªói ph√¢n t√≠ch y√™u c·∫ßu: ${error.message}`,
          code: "",
        },
      };
    }
  }

  /**
   * X·ª≠ l√Ω y√™u c·∫ßu ch√≠nh
   */
  async processRequest(userInput: string) {
    try {
      // Ph√¢n t√≠ch y√™u c·∫ßu
      const res = await this.analyzeUserRequest(userInput);
      const analysis = res.data;
      Logger.debug("Analysis result:", analysis);

      if (analysis.code && analysis.code.trim() !== "") {
        const functionBody = `
            return (async () => {
                try {
                ${analysis.code}
                } catch (err) {
                Logger.error("‚ùå L·ªói trong code:", err);
                api.sendMessage?.({ msg: '‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh.' }, event.threadId, event.type);
                }
            })();
            `;

        const asyncFunction = new Function(
          "api",
          "context",
          "event",
          functionBody
        );
        asyncFunction(this.api, this.context, JSON.parse(userInput)).catch(
          (err: any) => {
            this.api.sendMessage(
              {
                msg: `‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c thi l·ªánh: ${err.message}`,
                quote: JSON.parse(userInput).data,
              },
              JSON.parse(userInput).threadId,
              JSON.parse(userInput).type
            );
          }
        );
      }
      return {
        success: true,
        response: analysis.response || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.",
        history: res.history,
      };
    } catch (error: any) {
      Logger.error("Error processing request:", error);
      return {
        success: false,
        response: `‚ùå L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: ${error.message}`,
        history: [],
      };
    }
  }
}
