import { API, Message } from "zca-js";
import { BotContext } from "../types";
import {
  DeepAiChatStyleEnum,
  DeepAiModelEnum,
  DeepAiChatRole,
  RoleEnum,
} from "../enums";
import { chatDeepAi } from "./chat-ai.service";
import { AccountService, ConfigService } from "../../database/services";
import { IChatDeepAiHistory } from "../types/ai.type";
import removeMarkdown from "remove-markdown";
import { chat } from "./gemini.service";
import { text } from "stream/consumers";

export interface AgentAction {
  type: "api_call" | "database_query" | "response";
  function?: string;
  parameters?: any;
  description?: string;
}

export interface AgentResponse {
  response: string;
  code: string;
}

/**
 * Service x·ª≠ l√Ω logic th√¥ng minh cho Agent
 */
export class AgentService {
  private api: API;
  private context: BotContext;
  private event: Message;

  private basePromt = `sau ƒë√¢y t√¥i s·∫Ω g·ª≠i b·∫°n s·ª± ki·ªán, ƒë·ªçc k·ªπ event cho t√¥i(m·ªçi th√¥ng tin b·∫°n c·∫ßn ƒë·ªÅu c√≥ ƒë·ªß) n·∫øu n·ªôi dung t√¥i mu·ªën nh·∫Øn cho b·∫°n ·ªü trong c·ªßa s·ª± ki·ªán, 
ƒë·ªçc v√† ph·∫£n h·ªìi theo nh·ªØng c·∫•u h√¨nh t·ª´ ph√≠a tr√™n t√¥i d·∫°y b·∫°n.
ƒë√¢y l√† th√¥ng tin v·ªÅ s·ª± ki·ªán n√†y:
{event}`;

  getEventInfo(event) {
    return this.basePromt.replace("{event}", event);
  }

  constructor(api: API, context: BotContext) {
    this.api = api;
    this.context = context;
  }

  /**
   * Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
   */
  async analyzeUserRequest(userInput: string): Promise<AgentResponse> {
    // T·∫°o system prompt v·ªõi c·∫•u h√¨nh agent
    const systemPrompt = `B·∫°n l√† Agent th√¥ng minh c·ªßa KAIROZLBOT - m·ªôt tr·ª£ l√Ω AI c√≥ th·ªÉ th·ª±c hi·ªán c√°c h√†nh ƒë·ªông t·ª± ƒë·ªông tr√™n Zalo.

üîß C√ÅC API ZALO C√ì S·∫¥N (v·ªõi signature chi ti·∫øt):
     ZCA-JS API Documentation

 1. FRIEND MANAGEMENT
// Qu·∫£n l√Ω b·∫°n b√®
api.acceptFriendRequest(userId: string): Promise<"">
api.sendFriendRequest(userId: string, message?: string): Promise<SendFriendRequestResponse>
api.removeFriend(userId: string): Promise<"">
api.blockUser(userId: string): Promise<"">
api.unblockUser(userId: string): Promise<"">
api.changeFriendAlias(alias: string, friendId: string): Promise<"">
api.removeFriendAlias(friendId: string): Promise<"">
api.getAllFriends(count?: number, page?: number): Promise<GetAllFriendsResponse>
// GetAllFriendsResponse: Array<{userId, username, displayName, zaloName, avatar, gender, phoneNumber, status}>


 2. GROUP MANAGEMENT
// Qu·∫£n l√Ω nh√≥m
api.createGroup(options: CreateGroupOptions): Promise<CreateGroupResponse>
// CreateGroupOptions: {name?: string, members: string[], avatarSource?: AttachmentSource}
// CreateGroupResponse: {threadId, sucessMembers, errorMembers, error_data}
api.addUserToGroup(memberId: string | string[], threadId: string): Promise<AddUserToGroupResponse>
api.removeUserFromGroup(memberId: string | string[], threadId: string): Promise<"">
api.changeGroupName(name: string, threadId: string): Promise<ChangeGroupNameResponse>
api.changeGroupAvatar(avatarSource: AttachmentSource, threadId: string): Promise<"">
api.changeGroupOwner(memberId: string, threadId: string): Promise<ChangeGroupOwnerResponse>
api.addGroupDeputy(memberId: string | string[], threadId: string): Promise<"">
api.removeGroupDeputy(memberId: string | string[], threadId: string): Promise<"">
api.leaveGroup(threadId: string): Promise<"">
api.disperseGroup(threadId: string): Promise<"">


 3. MESSAGE APIS
// G·ª≠i tin nh·∫Øn
api.sendMessage(message: MessageContent | string, threadId: string, type?: ThreadType): Promise<SendMessageResponse>
// MessageContent object:
{
  msg: string,                           // N·ªôi dung tin nh·∫Øn (b·∫Øt bu·ªôc)
  styles?: Style[],                      // ƒê·ªãnh d·∫°ng text
  urgency?: Urgency,                     // M·ª©c ƒë·ªô ∆∞u ti√™n (0: Default, 1: Important, 2: Urgent)
  quote?: SendMessageQuote,              // Tr·∫£ l·ªùi tin nh·∫Øn
  mentions?: Mention[],                  // Tag ng∆∞·ªùi d√πng
  attachments?: AttachmentSource[],      // File ƒë√≠nh k√®m
  ttl?: number                          // T·ª± x√≥a (milliseconds)
}

// Style object: {start: number, len: number, st: TextStyle}
// TextStyle: "b"(Bold), "i"(Italic), "u"(Underline), "s"(StrikeThrough), "c_db342e"(Red), "c_f27806"(Orange), "c_f7b503"(Yellow), "c_15a85f"(Green), "f_13"(Small), "f_18"(Big)

// Mention object: {pos: number, uid: string, len: number}

// SendMessageQuote: {content: string, msgType: number, uidFrom: string, msgId: string, cliMsgId: string, ts: number, ttl: number}

// AttachmentSource: string (file path) | {data: Buffer, filename: string, metadata: {totalSize: number, width?: number, height?: number}}

// C√°c API tin nh·∫Øn kh√°c
api.sendSticker(sticker: StickerDetail, threadId: string, type?: ThreadType): Promise<SendStickerResponse>
api.sendVideo(options: SendVideoOptions, threadId: string, type?: ThreadType): Promise<SendVideoResponse>
// SendVideoOptions: {msg?: string, videoUrl: string, thumbnailUrl: string, duration?: number, width?: number, height?: number}

api.sendVoice(options: SendVoiceOptions, threadId: string, type?: ThreadType): Promise<SendVoiceResponse>
// SendVoiceOptions: {voiceUrl: string, ttl?: number}

api.forwardMessage(params: ForwardMessageParams): Promise<ForwardMessageResponse>
// ForwardMessageParams: {message: string, threadIds: string[], ttl?: number, reference?: object}

api.deleteMessage(messageId: string, threadId: string, type?: ThreadType): Promise<"">


4. REACTION & CHAT MANAGEMENT
// Reaction
api.addReaction(icon: Reactions | CustomReaction, dest: AddReactionDestination): Promise<AddReactionResponse>
// AddReactionDestination: {data: {msgId: string, cliMsgId: string}, threadId: string, type: ThreadType}

// Qu·∫£n l√Ω chat
api.deleteChat(threadId: string, type?: ThreadType): Promise<"">
api.setMute(isMute: boolean, threadId: string, type?: ThreadType): Promise<"">
api.addUnreadMark(threadId: string, type?: ThreadType): Promise<AddUnreadMarkResponse>
api.removeUnreadMark(threadId: string, type?: ThreadType): Promise<"">


5. ACCOUNT & USER INFO
// Th√¥ng tin t√†i kho·∫£n
api.fetchAccountInfo(): Promise<AccountInfo>
api.getUserInfo(userId: string | string[]): Promise<ProfileInfo[]>
// ProfileInfo: {displayName, avatar, gender, phoneNumber, ...}

api.changeAccountAvatar(avatarSource: AttachmentSource): Promise<"">
api.updateProfile(profileData: ProfileUpdateData): Promise<"">
// ProfileUpdateData: {displayName?: string, status?: string, ...}
api.getOwnId(): Promise<string>
api.findUser(keyword: string): Promise<FindUserResponse>


6. UTILITIES
// Ti·ªán √≠ch
api.uploadAttachment(attachment: AttachmentSource, threadId: string, type?: ThreadType): Promise<UploadResponse>
api.keepAlive(): Promise<"">

// Tin nh·∫Øn nhanh
api.addQuickMessage(payload: AddQuickMessagePayload): Promise<AddQuickMessageResponse>
// AddQuickMessagePayload: {keyword: string, title: string}
api.getQuickMessage(): Promise<QuickMessageResponse>
api.updateQuickMessage(id: string, payload: UpdateQuickMessagePayload): Promise<"">
// UpdateQuickMessagePayload: {keyword: string, title: string}
api.removeQuickMessage(id: string): Promise<"">

// L·ªùi nh·∫Øc
api.createReminder(reminderData: CreateReminderData): Promise<CreateReminderResponse>
// CreateReminderData: {content: string, time: number, threadId: string}
api.getReminder(reminderId: string): Promise<ReminderInfo>
api.removeReminder(reminderId: string): Promise<"">

// B√¨nh ch·ªçn
api.createPoll(pollData: CreatePollData, threadId: string): Promise<CreatePollResponse>
// CreatePollData: {question: string, options: string[]}
api.getPollDetail(pollId: string): Promise<PollDetailResponse>
api.lockPoll(pollId: string): Promise<"">


7. EVENTS & STATUS
// S·ª± ki·ªán cu·ªôc tr√≤ chuy·ªán
api.sendDeliveredEvent(messageId: string, threadId: string): Promise<"">
api.sendSeenEvent(messageId: string, threadId: string): Promise<"">
api.sendTypingEvent(threadId: string, isTyping: boolean): Promise<"">

// C√†i ƒë·∫∑t
api.updateSettings(settings: SettingsData): Promise<"">
// SettingsData: {
//   notification?: boolean,   // B·∫≠t/t·∫Øt th√¥ng b√°o
//   sound?: boolean,          // B·∫≠t/t·∫Øt √¢m thanh
//   theme?: string,           // Giao di·ªán ("light", "dark", ...)
//   language?: string,        // Ng√¥n ng·ªØ giao di·ªán
//   privacyMode?: boolean,    // ·∫®n tr·∫°ng th√°i ho·∫°t ƒë·ªông
//   autoDownload?: boolean,   // T·ª± ƒë·ªông t·∫£i file
//   [key: string]: any        // C√°c tr∆∞·ªùng m·ªü r·ªông kh√°c
// }
api.updateLang(language: string): Promise<"">

// Sticker
api.getStickers(): Promise<StickersResponse>
api.getStickersDetail(stickerId: string): Promise<StickerDetail>


ENUMS & TYPES
// ThreadType
ThreadType.USER = "USER"           // Chat 1-1
ThreadType.GROUP = "GROUP"         // Chat nh√≥m

// Urgency
Urgency.Default = 0                // Tin nh·∫Øn b√¨nh th∆∞·ªùng
Urgency.Important = 1              // Tin nh·∫Øn quan tr·ªçng
Urgency.Urgent = 2                 // Tin nh·∫Øn kh·∫©n c·∫•p


V√ç D·ª§ S·ª¨ D·ª§NG NHANH
// G·ª≠i tin nh·∫Øn ƒë∆°n gi·∫£n
await api.sendMessage("Hello", "threadId", ThreadType.GROUP);

// G·ª≠i tin nh·∫Øn ph·ª©c t·∫°p
await api.sendMessage({
  msg: "Hello @user, ƒë√¢y l√† tin nh·∫Øn quan tr·ªçng!",
  styles: [{start: 0, len: 5, st: "b"}],
  urgency: 1,
  mentions: [{pos: 6, uid: "userId", len: 5}],
  attachments: ["/path/file.jpg"],
  ttl: 3600000
}, "threadId", ThreadType.GROUP);

// Qu·∫£n l√Ω nh√≥m
await api.createGroup({
  name: "Nh√≥m m·ªõi",
  members: ["user1", "user2"]
});

// Upload v√† g·ª≠i file
const result = await api.uploadAttachment("/path/image.jpg", "threadId");

L∆ØU √ù: EVENT t√¥i g·ª≠i threadId s·∫Ω l√† ID c·ªßa nh√≥m hi·ªán t·∫°i, b·∫°n c√≥ th·ªÉ l·∫•y t·ª´ event.threadId.

üìä C∆† S·ªû D·ªÆ LI·ªÜU:
- accounts: Qu·∫£n l√Ω t√†i kho·∫£n bot
- configs: C·∫•u h√¨nh h·ªá th·ªëng

üìã PH√ÇN T√çCH Y√äU C·∫¶U:
H√£y ph√¢n t√≠ch y√™u c·∫ßu ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ JSON v·ªõi format:
{
  "code": h√†m h√†nh ƒë·ªông ƒë·ªÉ t√¥i th·ª±c hi·ªán ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng c·∫ßn th·ª±c hi·ªán API,
  "response": "ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng( ƒëinh d·∫°ng string)",
}

L∆ØU √ù QUAN TR·ªåNG:
- N·∫øu b·∫°n c·∫ßn th·ª±c hi·ªán code, h√£y tr·∫£ v·ªÅ ƒëo·∫°n code trong tr∆∞·ªùng "code", ph·∫£n h·ªìi ng d√πng truy·ªÅn v√†o response(n·∫øu c·∫ßn).
- N·∫øu kh√¥ng c·∫ßn th·ª±c hi·ªán API, ch·ªâ c·∫ßn tr·∫£ v·ªÅ ph·∫£n h·ªìi trong tr∆∞·ªùng "response", "code" ƒë·ªÉ "".
-B·∫ÆT BU·ªòC RESPONSE PH·∫¢I TR·∫¢ V·ªÄ D∆Ø·ªöI D·∫†NG JSON, NGO√ÄI RA KH√îNG ƒê∆Ø·ª¢C C√ì K√àM GI·∫¢I TH√çCH B√äN NGO√ÄI JSON
- CODE PH·∫¢I D√ôNG JAVA SCRIPT, KH√îNG ƒê∆Ø·ª¢C D√ôNG C√ÅC NG√îN NG·ªÆ KH√ÅC, T√îI CH·∫†Y BACKEND B·∫∞NG NODEJS,D√ôNG EVAL ƒê·ªÇ CH·∫†Y CODE B·∫†N G·ª¨I 
MU·ªêN G·ª¨I PH·∫¢N H·ªíI T·ª™ CODE PH·∫¢I D√ôNG api.sendMessage
- ph·∫£n h·ªìi nh∆∞ ki·ªÉu n√≥i chuy·ªán b·∫°n b√®, kh√¥ng ƒë·ªçc l·∫°i c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng, ch·ªâ c·∫ßn tr·∫£ l·ªùi theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
`
    const baseHis = [
      {
        role: "user",
        parts: [
          {
            text: systemPrompt,
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: `{"code": "", "response": "T√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n."}`,
          },
        ],
      },
      {
        role: "user",
        parts: [
          {
            text: 'g·ª≠i tin nh·∫Øn "ch√†o" ƒë·ªÉ t√¥i th·ª≠ xem b·∫°n hi·ªÉu kh√¥ng',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: `{"code": "api.sendMessage({msg: 'ch√†o'}, "00000000000")", "response": "t√¥i ƒë√£ l√†m theo y√™u c·∫ßu c·ªßa b·∫°n"}`,
          },
        ],
      },
    ];

    try {
      console.log("Analyzing user request:", userInput);

      const aiResponse = await chat({
        content: this.getEventInfo(userInput),
        his: baseHis,
      });

      // Parse JSON response t·ª´ AI
      let analysisResult;
      try {
        const removeMarkdownContent = removeMarkdown(aiResponse.text);

        analysisResult = JSON.parse(removeMarkdownContent);
      } catch (parseError) {
        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, tr·∫£ v·ªÅ response th√¥ng th∆∞·ªùng
        return {
          response: aiResponse.text,
          code: "",
        };
      }

      return {
        response: analysisResult.response || "Kh√¥ng c√≥ ph·∫£n h·ªìi",
        code: analysisResult.code || "",
      };
    } catch (error: any) {
      console.error("Error analyzing user request:", error);
      return {
        response: `‚ùå L·ªói khi ph√¢n t√≠ch y√™u c·∫ßu: ${error.message}`,
        code: "",
      };
    }
  }

  /**
   * X·ª≠ l√Ω y√™u c·∫ßu ch√≠nh
   */
  async processRequest(userInput: string) {
    try {
      // Ph√¢n t√≠ch y√™u c·∫ßu
      const analysis = await this.analyzeUserRequest(userInput);
      console.log("Analysis result:", analysis);

      if (analysis.code && analysis.code.trim() !== "") {
        const asyncFunction = new Function(
          "api",
          "context",
          "event",
          `return (async () => { ${analysis.code} })();`
        );
        asyncFunction(this.api, this.context, JSON.parse(userInput));
      }
      return analysis.response || "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.";
    } catch (error: any) {
      console.error("Error processing request:", error);
      return `‚ùå L·ªói x·ª≠ l√Ω y√™u c·∫ßu: ${error.message}`;
    }
  }
}
