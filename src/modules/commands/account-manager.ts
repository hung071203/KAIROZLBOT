import {
  API,
  LoginQRCallbackEvent,
  LoginQRCallbackEventType,
  Message,
} from "zca-js";
import { BotContext, CommandModule, GroupCommands } from "../../common/types";
import { CACHEDIR, RoleBotEnum, RoleUserEnum } from "../../common";
import { createBot } from "../../main";
import { safeBase64 } from "../../utils/download.util";
import * as fs from "fs";
import { Account } from "../../database";
import { waiting } from "../../utils/other.util";
import { renderTextImage } from "../../common/helpers";
import path from "path";

export default {
  config: {
    name: "acc",
    version: "1.0.0",
    credits: "Hung dep trai",
    description: "Upscale h√¨nh ·∫£nh",
    tag: "AI",
    usage: "4k rep h√¨nh mu·ªën upscale",
    countDown: 1,
    roleUser: RoleUserEnum.ALL,
    roleBot: RoleBotEnum.FREE,
    self: true, // Ch·ªâ d√†nh cho bot c√° nh√¢n
  },

  run: async (
    api: API,
    context: BotContext,
    event: Message,
    args: string[]
  ) => {
    try {
      // Ki·ªÉm tra xem c√≥ tham s·ªë n√†o kh√¥ng
      if (args.length === 0) {
        api.sendMessage(
          "‚ùå Vui l√≤ng cung c·∫•p tham s·ªë cho l·ªánh account.",
          event.threadId
        );
        return;
      }

      // X·ª≠ l√Ω l·ªánh account
      const command = args[0].toLowerCase();
      switch (command) {
        case "add": {
          await addAcc(api, context, event);
          break;
        }
        case "list": {
          await listAcc(api, context, event);
          break;
        }
        case "runner": {
          await runner(api, context, event);
          break;
        }
        case "stop": {
          await stop(api, context, event, args[1]);
          break;
        }
        case "stopall": {
          process.exit(0);
        }
        case "reload": {
          await reload(api, context, event, args[1]);
          break;
        }
        case "delete": {
          await deleteAcc(api, context, event, args[1]);
          break;
        }
        case "extend": {
          await extendAcc(api, context, event, args.slice(1));
          break;
        }
        case "role": {
          await setRole(api, context, event, args.slice(1));
          break;
        }
        case "help": {
          api.sendMessage(
            `üìú Danh s√°ch l·ªánh:\n\n` +
              `- \`add\`: T·∫°o t√†i kho·∫£n m·ªõi b·∫±ng QR.\n` +
              `- \`list\`: Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n.\n` +
              `- \`runner\`: Hi·ªÉn th·ªã danh s√°ch bot ƒëang ch·∫°y.\n` +
              `- \`stop <id>\`: D·ª´ng bot theo ID.\n` +
              `- \`stopall\`: D·ª´ng t·∫•t c·∫£ bot v√† tho√°t ch∆∞∆°ng tr√¨nh.\n` +
              `- \`reload <id|all>\`: T·∫£i l·∫°i bot theo ID ho·∫∑c t·∫•t c·∫£ bot.\n` +
              `- \`delete <id>\`: X√≥a t√†i kho·∫£n theo ID.\n` +
              `- \`extend <id> <days|inf>\`: Gia h·∫°n t√†i kho·∫£n theo ID v√† s·ªë ng√†y (ho·∫∑c 'inf' cho kh√¥ng gi·ªõi h·∫°n).\n` +
              `- \`role <id> <role>\`: C·∫≠p nh·∫≠t vai tr√≤ c·ªßa t√†i kho·∫£n theo ID v√† vai tr√≤ m·ªõi.`,
            event.threadId,
            event.type
          );
          break;
        }
        default:
          api.sendMessage(
            {
              msg: `‚ùå L·ªánh kh√¥ng h·ª£p l·ªá.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
      }
    } catch (error: any) {
      console.error("L·ªói khi th·ª±c thi l·ªánh account:", error);
      api.sendMessage(
        {
          msg: `‚ùå L·ªói khi th·ª±c thi l·ªánh account: ${error.message}`,
          quote: event.data,
        },
        event.threadId,
        event.type
      );
      return;
    }
  },
} as GroupCommands;

async function addAcc(api: API, context: BotContext, event: Message) {
  await api.sendMessage(
    {
      msg: `üì¶ Ti·∫øn h√†nh t·∫°o t√†i kho·∫£n b·∫±ng QR.`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );

  const account: Partial<Account> = {
    accountId: Date.now().toString(), // T·∫°o ID ng·∫´u nhi√™n
    loginMethod: "qr", // Ho·∫∑c "cookie" t√πy v√†o y√™u c·∫ßu
    cookie: "",
    imei: "1234567890", // Thay ƒë·ªïi theo y√™u c·∫ßu
    userAgent:
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
  };

  // T·∫°o t√†i kho·∫£n m·∫´u
  await context.db.account.create(account);

  const { handlerReaction, handlerReply, handlerUndo, ...addContext } = context;

  // Th√™m t√†i kho·∫£n m·ªõi
  await createBot(account, addContext, CACHEDIR, (e: LoginQRCallbackEvent) => {
    const type = e.type;

    console.log(e);

    switch (type) {
      case LoginQRCallbackEventType.QRCodeGenerated: {
        const qrPath = CACHEDIR + `/qr_${account.accountId}.png`;
        safeBase64(qrPath, `data:image/png;base64,${e.data.image}`);

        const buffer = fs.readFileSync(qrPath); // ƒê·ªçc file ·∫£nh ƒë·ªìng b·ªô
        const stats = fs.statSync(qrPath); // L·∫•y th√¥ng tin file

        api.sendMessage(
          {
            msg: `üì∏ Vui l√≤ng qu√©t m√£ QR ƒë·ªÉ ƒëƒÉng nh·∫≠p.`,
            quote: event.data,
            attachments: [
              {
                data: buffer,
                filename: `qr_${account.accountId}.png`,
                metadata: {
                  totalSize: stats.size,
                },
              },
            ],
          },
          event.threadId,
          event.type
        );

        break;
      }
      case LoginQRCallbackEventType.QRCodeDeclined: {
        api.sendMessage(
          {
            msg: `‚ùå B·∫°n ƒë√£ t·ª´ ch·ªëi m√£ QR. Vui l√≤ng th·ª≠ l·∫°i.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        context.db.account.delete({
          accountId: account.accountId,
        });
        break;
      }
      case LoginQRCallbackEventType.QRCodeScanned: {
        api.sendMessage(
          {
            msg: `‚úÖ M√£ QR ƒë√£ ƒë∆∞·ª£c qu√©t b·ªüi t√†i kho·∫£n c√≥ t√™n ${e.data.display_name}. Vui l√≤ng ch·ªù ƒëƒÉng nh·∫≠p.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        break;
      }
      case LoginQRCallbackEventType.QRCodeExpired: {
        api.sendMessage(
          {
            msg: `‚ùå M√£ QR ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        context.db.account.delete({
          accountId: account.accountId,
        });
        break;
      }
      case LoginQRCallbackEventType.GotLoginInfo: {
        api.sendMessage(
          {
            msg: `‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√†i kho·∫£n ${e.data.imei}.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        // C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
        context.db.account.update(
          {
            accountId: account.accountId,
          },
          {
            cookie: JSON.stringify(e.data.cookie),
            imei: e.data.imei,
            userAgent: e.data.userAgent,
            loginMethod: "cookie", // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p
          }
        );
        break;
      }
      default:
        break;
    }
  });
}

async function listAcc(api: API, context: BotContext, event: Message) {
  const accounts = await context.db.account.findAll();
  if (accounts.length === 0) {
    api.sendMessage(
      "üìÉ Hi·ªán t·∫°i kh√¥ng c√≥ t√†i kho·∫£n n√†o trong h·ªá th·ªëng.",
      event.threadId,
      event.type
    );
  } else {
    const accountListText = accounts
      .map((acc, index) => {
        const expired =
          acc.role === RoleBotEnum.ADMIN
            ? "üïí HSD: Vƒ©nh vi·ªÖn"
            : acc.expirationDate
            ? `üïí HSD: ${acc.expirationDate.toLocaleString("vi-VN", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit",
                hour12: false,
              })}`
            : "üïí HSD: Kh√¥ng c√≥";

        return [
          `üîπ T√†i kho·∫£n #${index + 1}`,
          `‚Ä¢ ID: ${acc.id}`,
          `‚Ä¢ ZaloID: ${acc.accountId}${
            api.getOwnId() === acc.accountId ? " (Bot hi·ªán t·∫°i)" : ""
          }`,
          `‚Ä¢ ƒêƒÉng nh·∫≠p: ${acc.loginMethod.toUpperCase()}`,
          `‚Ä¢ Tr·∫°ng th√°i: ${
            acc.isActive ? "‚úÖ Ho·∫°t ƒë·ªông" : "‚ùå Kh√¥ng ho·∫°t ƒë·ªông"
          }`,
          `‚Ä¢ Vai tr√≤: ${acc.role}`,
          `‚Ä¢ ${expired}`,
          `‚Ä¢ T·∫°o l√∫c: ${acc.createdAt.toLocaleString("vi-VN")}`,
        ].join("\n");
      })
      .join("\n\n");

    const outputPath = path.join(
      CACHEDIR,
      `account_list_${Date.now()}.png`
    );

    await renderTextImage(accountListText, outputPath, {
      font: "24px Arial",
      lineHeight: 36,
      padding: 20,
      textColor: "#000",
      backgroundColor: "#fff",
    });

    api.sendMessage(
      {
        msg: "üìÉ Danh s√°ch t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.",
        quote: event.data,
        attachments: outputPath,
      },
      event.threadId,
      event.type
    );
  }
}

async function runner(api: API, context: BotContext, event: Message) {
  const multiAcc = context.botManager.getAllBots();
  if (multiAcc.length === 0) {
    api.sendMessage("üìÉ Hi·ªán t·∫°i kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y.", event.threadId);
    return;
  }
  // console.log(multiAcc);
  const msg = multiAcc
    .map((bot, index) => {
      return [`üîπ Bot #${index + 1}`, `‚Ä¢ ID: ${bot.getAccountId()}`].join("\n");
    })
    .join("\n\n");

  api.sendMessage(
    {
      msg,
      quote: event.data,
    },
    event.threadId,
    event.type
  );
}

async function stop(api: API, context: BotContext, event: Message, id: string) {
  if (!id) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p ID bot c·∫ßn d·ª´ng.",
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  const bot = context.botManager.getBot(id);
  if (!bot) {
    api.sendMessage(
      {
        msg: `‚ùå Kh√¥ng t√¨m th·∫•y bot v·ªõi ID ${id}.`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  context.botManager.removeBot(id);
}

async function reload(
  api: API,
  context: BotContext,
  event: Message,
  handlerName: string
) {
  if (!handlerName) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p id bot c·∫ßn t·∫£i l·∫°i.",
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  await api.sendMessage(
    {
      msg: `üîÑ ƒêang t·∫£i l·∫°i bot ${handlerName}, h√£y ƒë·ª£i 3 ƒë·∫øn 5s ƒë·ªÉ c√≥ hi·ªáu l·ª±c!`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );

  await waiting(1000); // ƒê·ª£i 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ bot ƒë√£ d·ª´ng
  try {
    const { handlerReaction, handlerReply, handlerUndo, ...addContext } =
      context;

    if (handlerName === "all") {
      context.botManager.removeAllBots();

      const validAcc = await context.db.account.getActiveAccounts();
      for (const account of validAcc) {
        await createBot(account, addContext, CACHEDIR);
      }
    } else {
      const bot = context.botManager.getBot(handlerName);
      if (!bot) {
        api.sendMessage(
          {
            msg: `‚ùå Kh√¥ng t√¨m th·∫•y bot v·ªõi ID ${handlerName}.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        return;
      }

      const account = await context.db.account.findOne({
        accountId: handlerName,
      });
      if (!account) {
        api.sendMessage(
          {
            msg: `‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi ID ${handlerName}.`,
            quote: event.data,
          },
          event.threadId,
          event.type
        );
        return;
      }

      // D·ª´ng bot hi·ªán t·∫°i
      context.botManager.removeBot(handlerName);

      await createBot(account, addContext, CACHEDIR);
    }
  } catch (error) {
    console.error("L·ªói khi t·∫£i l·∫°i handler:", error);
    api.sendMessage(
      {
        msg: `‚ùå L·ªói khi t·∫£i l·∫°i bot ${handlerName}: ${error.message}`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
  }
}

async function deleteAcc(
  api: API,
  context: BotContext,
  event: Message,
  accountId: string
) {
  if (!accountId) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p ID t√†i kho·∫£n c·∫ßn x√≥a.",
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  const account = await context.db.account.findOne({ accountId });
  if (!account) {
    api.sendMessage(
      {
        msg: `‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi ID ${accountId}.`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  // X√≥a bot n·∫øu ƒëang ch·∫°y
  try {
    context.botManager.removeBot(accountId);
  } catch (error: any) {
    console.error(`L·ªói khi x√≥a bot ${accountId}:`, error);
  }

  // X√≥a t√†i kho·∫£n kh·ªèi database
  await context.db.account.delete({ accountId });

  api.sendMessage(
    {
      msg: `‚úÖ T√†i kho·∫£n ${accountId} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );
}

async function extendAcc(
  api: API,
  context: BotContext,
  event: Message,
  args: string[]
) {
  if (args.length < 2) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p ID t√†i kho·∫£n v√† th·ªùi gian gia h·∫°n (ng√†y).",
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  const accountId = args[0];
  let daysToAdd: any;
  if (args[1] == "inf") {
    daysToAdd = null; // Kh√¥ng gi·ªõi h·∫°n th·ªùi gian
  } else {
    daysToAdd = parseInt(args[1]);
    if (isNaN(daysToAdd) || daysToAdd <= 0) {
      api.sendMessage(
        {
          msg: "‚ùå Vui l√≤ng cung c·∫•p s·ªë ng√†y h·ª£p l·ªá ƒë·ªÉ gia h·∫°n.",
          quote: event.data,
        },
        event.threadId,
        event.type
      );
      return;
    }
    daysToAdd = new Date(Date.now() + daysToAdd * 24 * 60 * 60 * 1000);
  }

  const account = await context.db.account.findOne({ accountId });
  if (!account) {
    api.sendMessage(
      {
        msg: `‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi ID ${accountId}.`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  // C·∫≠p nh·∫≠t ng√†y h·∫øt h·∫°n
  account.expirationDate = daysToAdd;
  await context.db.account.update(
    { accountId },
    { expirationDate: account.expirationDate }
  );

  api.sendMessage(
    {
      msg: `‚úÖ T√†i kho·∫£n ${accountId} ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√†nh c√¥ng. HSD m·ªõi: ${
        daysToAdd ? daysToAdd.toLocaleDateString("vi-VN") : "Kh√¥ng gi·ªõi h·∫°n"
      }`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );
}

async function setRole(
  api: API,
  context: BotContext,
  event: Message,
  args: string[]
) {
  if (args.length < 2) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p ID t√†i kho·∫£n v√† vai tr√≤ m·ªõi.",
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  const accountId = args[0];
  const newRole = args[1].toUpperCase();

  if (!Object.values(RoleBotEnum).includes(newRole as RoleBotEnum)) {
    api.sendMessage(
      {
        msg: `‚ùå Vai tr√≤ kh√¥ng h·ª£p l·ªá. C√°c vai tr√≤ h·ª£p l·ªá: ${Object.values(
          RoleBotEnum
        ).join(", ")}`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  const account = await context.db.account.findOne({ accountId });
  if (!account) {
    api.sendMessage(
      {
        msg: `‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi ID ${accountId}.`,
        quote: event.data,
      },
      event.threadId,
      event.type
    );
    return;
  }

  // C·∫≠p nh·∫≠t vai tr√≤
  account.role = newRole as RoleBotEnum;
  await context.db.account.update({ accountId }, { role: account.role });

  api.sendMessage(
    {
      msg: `‚úÖ Vai tr√≤ c·ªßa t√†i kho·∫£n ${accountId} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${newRole}.`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );
}
