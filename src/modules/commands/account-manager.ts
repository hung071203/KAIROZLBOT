import {
  API,
  LoginQRCallbackEvent,
  LoginQRCallbackEventType,
  Message,
} from "zca-js";
import { BotContext, CommandModule, GroupCommands } from "../../common/types";
import { CACHEDIR, RoleEnum } from "../../common";
import { createBot } from "../../main";
import { safeBase64 } from "../../utils/download.util";
import * as fs from "fs";
import { Account } from "../../database";

export default {
  config: {
    name: "account",
    version: "1.0.0",
    credits: "Hung dep trai",
    description: "Upscale h√¨nh ·∫£nh",
    tag: "AI",
    usage: "4k rep h√¨nh mu·ªën upscale",
    countDown: 1,
    role: RoleEnum.ALL,
    self: true, // Ch·ªâ d√†nh cho bot c√° nh√¢n
  },

  run: async (
    api: API,
    context: BotContext,
    event: Message,
    args: string[]
  ) => {
    try {
      // Ki·ªÉm tra xem c√≥ tham s·ªë n√†o kh√¥ng
      if (args.length === 0) {
        api.sendMessage(
          "‚ùå Vui l√≤ng cung c·∫•p tham s·ªë cho l·ªánh account.",
          event.threadId
        );
        return;
      }

      // X·ª≠ l√Ω l·ªánh account
      const command = args[0].toLowerCase();
      switch (command) {
        case "add": {
          await addAcc(api, context, event);
          break;
        }
        case "list": {
          await listAcc(api, context, event);
          break;
        }
        case "runner": {
          await runner(api, context, event);
          break;
        }
        case "stop": {
          await stop(api, context, event, args[1]);
          break;
        }
        case "stopall": {
          await stopAll(api, context, event);
          break;
        }
        default:
          api.sendMessage(
            {
              msg: `‚ùå L·ªánh kh√¥ng h·ª£p l·ªá.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
      }
    } catch (error: any) {
      console.error("L·ªói khi th·ª±c thi l·ªánh account:", error);
      api.sendMessage(
        {
          msg: `‚ùå L·ªói khi th·ª±c thi l·ªánh account: ${error.message}`,
          quote: event.data,
        },
        event.threadId,
        event.type
      );
      return;
    }
  },
} as GroupCommands;

async function addAcc(api: API, context: BotContext, event: Message) {
  await api.sendMessage(
    {
      msg: `üì¶ Ti·∫øn h√†nh t·∫°o t√†i kho·∫£n b·∫±ng QR.`,
      quote: event.data,
    },
    event.threadId,
    event.type
  );

  const account: Partial<Account> = {
    accountId: Date.now().toString(), // T·∫°o ID ng·∫´u nhi√™n
    loginMethod: "qr", // Ho·∫∑c "cookie" t√πy v√†o y√™u c·∫ßu
    cookie: "",
    imei: "1234567890", // Thay ƒë·ªïi theo y√™u c·∫ßu
    userAgent:
      "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
  };

  // T·∫°o t√†i kho·∫£n m·∫´u
  await context.db.account.create(account);

  // Th√™m t√†i kho·∫£n m·ªõi
  await createBot(
    account,
    context.botManager,
    CACHEDIR,
    context.db,
    context.appConfig,
    (e: LoginQRCallbackEvent) => {
      const type = e.type;

      console.log(e);

      switch (type) {
        case LoginQRCallbackEventType.QRCodeGenerated: {
          const qrPath = CACHEDIR + `/qr_${account.accountId}.png`;
          safeBase64(qrPath, `data:image/png;base64,${e.data.image}`);

          const buffer = fs.readFileSync(qrPath); // ƒê·ªçc file ·∫£nh ƒë·ªìng b·ªô
          const stats = fs.statSync(qrPath); // L·∫•y th√¥ng tin file

          api.sendMessage(
            {
              msg: `üì∏ Vui l√≤ng qu√©t m√£ QR ƒë·ªÉ ƒëƒÉng nh·∫≠p.`,
              quote: event.data,
              attachments: [
                {
                  data: buffer,
                  filename: `qr_${account.accountId}.png`,
                  metadata: {
                    totalSize: stats.size,
                  },
                },
              ],
            },
            event.threadId,
            event.type
          );

          break;
        }
        case LoginQRCallbackEventType.QRCodeDeclined: {
          api.sendMessage(
            {
              msg: `‚ùå B·∫°n ƒë√£ t·ª´ ch·ªëi m√£ QR. Vui l√≤ng th·ª≠ l·∫°i.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
          context.db.account.delete({
            accountId: account.accountId,
          });
          break;
        }
        case LoginQRCallbackEventType.QRCodeScanned: {
          api.sendMessage(
            {
              msg: `‚úÖ M√£ QR ƒë√£ ƒë∆∞·ª£c qu√©t b·ªüi t√†i kho·∫£n c√≥ t√™n ${e.data.display_name}. Vui l√≤ng ch·ªù ƒëƒÉng nh·∫≠p.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
          break;
        }
        case LoginQRCallbackEventType.QRCodeExpired: {
          api.sendMessage(
            {
              msg: `‚ùå M√£ QR ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ l·∫°i.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
          context.db.account.delete({
            accountId: account.accountId,
          });
          break;
        }
        case LoginQRCallbackEventType.GotLoginInfo: {
          api.sendMessage(
            {
              msg: `‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√†i kho·∫£n ${e.data.imei}.`,
              quote: event.data,
            },
            event.threadId,
            event.type
          );
          // C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
          context.db.account.update(
            {
              accountId: account.accountId,
            },
            {
              cookie: JSON.stringify(e.data.cookie),
              imei: e.data.imei,
              userAgent: e.data.userAgent,
              loginMethod: "cookie", // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p
            }
          );
          break;
        }
        default:
          break;
      }
    }
  );
}

async function listAcc(api: API, context: BotContext, event: Message) {
  const accounts = await context.db.account.findAll();
  if (accounts.length === 0) {
    api.sendMessage(
      "üìÉ Hi·ªán t·∫°i kh√¥ng c√≥ t√†i kho·∫£n n√†o trong h·ªá th·ªëng.",
      event.threadId
    );
  } else {
    const accountList = accounts
      .map((acc, index) => {
        const expired = acc.expirationDate
          ? `üïí HSD: ${acc.expirationDate.toLocaleDateString("vi-VN")}`
          : "üïí HSD: Kh√¥ng c√≥";
        return [
          `üîπ T√†i kho·∫£n #${index + 1}`,
          `‚Ä¢ ID: ${acc.id}`,
          `‚Ä¢ ZaloID: ${acc.accountId}`,
          `‚Ä¢ ƒêƒÉng nh·∫≠p: ${acc.loginMethod.toUpperCase()}`,
          `‚Ä¢ Tr·∫°ng th√°i: ${
            acc.isActive ? "‚úÖ Ho·∫°t ƒë·ªông" : "‚ùå Kh√¥ng ho·∫°t ƒë·ªông"
          }`,
          `‚Ä¢ Vai tr√≤: ${acc.role}`,
          `‚Ä¢ ${expired}`,
          `‚Ä¢ T·∫°o l√∫c: ${acc.createdAt.toLocaleString("vi-VN")}`,
        ].join("\n");
      })
      .join("\n\n");

    api.sendMessage(
      `üìÉ Danh s√°ch t√†i kho·∫£n:\n\n${accountList}`,
      event.threadId
    );
  }
}

async function runner(api: API, context: BotContext, event: Message) {
  const multiAcc = context.botManager.getAllBots();
  if (multiAcc.length === 0) {
    api.sendMessage("üìÉ Hi·ªán t·∫°i kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y.", event.threadId);
    return;
  }
  // console.log(multiAcc);
  const msg = multiAcc
    .map((bot, index) => {
      return [`üîπ Bot #${index + 1}`, `‚Ä¢ ID: ${bot.getAccountId()}`].join("\n");
    })
    .join("\n\n");

  api.sendMessage(
    {
      msg,
      quote: event.data,
    },
    event.threadId,
    event.type
  );
}

async function stop(api: API, context: BotContext, event: Message, id: string) {
  if (!id) {
    api.sendMessage(
      {
        msg: "‚ùå Vui l√≤ng cung c·∫•p ID bot c·∫ßn d·ª´ng.",
        quote: event.data,
      },
      event.threadId
    );
    return;
  }

  const bot = context.botManager.getBot(id);
  if (!bot) {
    api.sendMessage(
      {
        msg: `‚ùå Kh√¥ng t√¨m th·∫•y bot v·ªõi ID ${id}.`,
        quote: event.data,
      },
      event.threadId
    );
    return;
  }

  context.botManager.removeBot(id);
}

async function stopAll(api: API, context: BotContext, event: Message) {
  context.botManager.stopAllBots();
}
